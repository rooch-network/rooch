// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BlockInfo {
    /// block_hash is the hash of the block
    #[prost(string, tag = "1")]
    pub block_hash: ::prost::alloc::string::String,
    /// block_height is the height of the block
    #[prost(uint64, tag = "2")]
    pub block_height: u64,
    /// block_timestamp is the unix timestamp of the block
    #[prost(uint64, tag = "3")]
    pub block_timestamp: u64,
}
impl ::prost::Name for BlockInfo {
    const NAME: &'static str = "BlockInfo";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.BlockInfo".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.BlockInfo".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryIsBlockBabylonFinalizedRequest {
    #[prost(message, optional, tag = "1")]
    pub block: ::core::option::Option<BlockInfo>,
}
impl ::prost::Name for QueryIsBlockBabylonFinalizedRequest {
    const NAME: &'static str = "QueryIsBlockBabylonFinalizedRequest";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryIsBlockBabylonFinalizedRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryIsBlockBabylonFinalizedRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBlockRangeBabylonFinalizedRequest {
    /// blocks is a list of blocks to query
    #[prost(message, repeated, tag = "1")]
    pub blocks: ::prost::alloc::vec::Vec<BlockInfo>,
}
impl ::prost::Name for QueryBlockRangeBabylonFinalizedRequest {
    const NAME: &'static str = "QueryBlockRangeBabylonFinalizedRequest";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryBlockRangeBabylonFinalizedRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryBlockRangeBabylonFinalizedRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryBlockRangeBabylonFinalizedResponse {
    /// last_finalized_block_height is the height of the last finalized block
    #[prost(uint64, tag = "1")]
    pub last_finalized_block_height: u64,
}
impl ::prost::Name for QueryBlockRangeBabylonFinalizedResponse {
    const NAME: &'static str = "QueryBlockRangeBabylonFinalizedResponse";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryBlockRangeBabylonFinalizedResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryBlockRangeBabylonFinalizedResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryBtcStakingActivatedTimestampRequest {}
impl ::prost::Name for QueryBtcStakingActivatedTimestampRequest {
    const NAME: &'static str = "QueryBtcStakingActivatedTimestampRequest";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryBtcStakingActivatedTimestampRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryBtcStakingActivatedTimestampRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryBtcStakingActivatedTimestampResponse {
    /// timestamp is the unix timestamp when BTC staking was activated
    #[prost(uint64, tag = "1")]
    pub activated_timestamp: u64,
}
impl ::prost::Name for QueryBtcStakingActivatedTimestampResponse {
    const NAME: &'static str = "QueryBtcStakingActivatedTimestampResponse";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryBtcStakingActivatedTimestampResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryBtcStakingActivatedTimestampResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryIsBlockFinalizedByHeightRequest {
    /// block_height is the height of the block
    #[prost(uint64, tag = "1")]
    pub block_height: u64,
}
impl ::prost::Name for QueryIsBlockFinalizedByHeightRequest {
    const NAME: &'static str = "QueryIsBlockFinalizedByHeightRequest";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryIsBlockFinalizedByHeightRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryIsBlockFinalizedByHeightRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryIsBlockFinalizedByHashRequest {
    /// block_hash is the hash of the block
    #[prost(string, tag = "1")]
    pub block_hash: ::prost::alloc::string::String,
}
impl ::prost::Name for QueryIsBlockFinalizedByHashRequest {
    const NAME: &'static str = "QueryIsBlockFinalizedByHashRequest";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryIsBlockFinalizedByHashRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryIsBlockFinalizedByHashRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryIsBlockFinalizedResponse {
    /// is_finalized is true if the block is finalized
    #[prost(bool, tag = "1")]
    pub is_finalized: bool,
}
impl ::prost::Name for QueryIsBlockFinalizedResponse {
    const NAME: &'static str = "QueryIsBlockFinalizedResponse";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryIsBlockFinalizedResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryIsBlockFinalizedResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct QueryLatestFinalizedBlockRequest {}
impl ::prost::Name for QueryLatestFinalizedBlockRequest {
    const NAME: &'static str = "QueryLatestFinalizedBlockRequest";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryLatestFinalizedBlockRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryLatestFinalizedBlockRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryBlockResponse {
    #[prost(message, optional, tag = "1")]
    pub block: ::core::option::Option<BlockInfo>,
}
impl ::prost::Name for QueryBlockResponse {
    const NAME: &'static str = "QueryBlockResponse";
    const PACKAGE: &'static str = "proto";
    fn full_name() -> ::prost::alloc::string::String {
        "proto.QueryBlockResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/proto.QueryBlockResponse".into()
    }
}
/// Generated client implementations.
pub mod finality_gadget_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct FinalityGadgetClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl FinalityGadgetClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> FinalityGadgetClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FinalityGadgetClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FinalityGadgetClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// QueryIsBlockBabylonFinalized returns the finality status of a block by
        /// querying Babylon chain
        pub async fn query_is_block_babylon_finalized(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryIsBlockBabylonFinalizedRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryIsBlockFinalizedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proto.FinalityGadget/QueryIsBlockBabylonFinalized",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "proto.FinalityGadget",
                        "QueryIsBlockBabylonFinalized",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// QueryBlockRangeBabylonFinalized returns the last finalized block height
        /// within a block range by querying Babylon chain
        pub async fn query_block_range_babylon_finalized(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryBlockRangeBabylonFinalizedRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryBlockRangeBabylonFinalizedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proto.FinalityGadget/QueryBlockRangeBabylonFinalized",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "proto.FinalityGadget",
                        "QueryBlockRangeBabylonFinalized",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// QueryBtcStakingActivatedTimestamp returns the timestamp when BTC staking
        /// was activated
        pub async fn query_btc_staking_activated_timestamp(
            &mut self,
            request: impl tonic::IntoRequest<
                super::QueryBtcStakingActivatedTimestampRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::QueryBtcStakingActivatedTimestampResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proto.FinalityGadget/QueryBtcStakingActivatedTimestamp",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "proto.FinalityGadget",
                        "QueryBtcStakingActivatedTimestamp",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// QueryIsBlockFinalizedByHeight returns the finality status of a block at
        /// given height by querying the local db
        pub async fn query_is_block_finalized_by_height(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryIsBlockFinalizedByHeightRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryIsBlockFinalizedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proto.FinalityGadget/QueryIsBlockFinalizedByHeight",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "proto.FinalityGadget",
                        "QueryIsBlockFinalizedByHeight",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// QueryIsBlockFinalizedByHash returns the finality status of a block with
        /// given hash by querying the local db
        pub async fn query_is_block_finalized_by_hash(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryIsBlockFinalizedByHashRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryIsBlockFinalizedResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proto.FinalityGadget/QueryIsBlockFinalizedByHash",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "proto.FinalityGadget",
                        "QueryIsBlockFinalizedByHash",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// QueryLatestFinalizedBlock returns the latest consecutively finalized block
        /// by querying the local db
        pub async fn query_latest_finalized_block(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryLatestFinalizedBlockRequest>,
        ) -> std::result::Result<
            tonic::Response<super::QueryBlockResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/proto.FinalityGadget/QueryLatestFinalizedBlock",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("proto.FinalityGadget", "QueryLatestFinalizedBlock"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
