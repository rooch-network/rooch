// This file is generated by rust-protobuf 3.7.1. Do not edit
// .proto file is parsed by protoc --rs_out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `finalitygadget.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_1;

// @@protoc_insertion_point(message:proto.BlockInfo)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BlockInfo {
    // message fields
    ///  block_hash is the hash of the block
    // @@protoc_insertion_point(field:proto.BlockInfo.block_hash)
    pub block_hash: ::std::string::String,
    ///  block_height is the height of the block
    // @@protoc_insertion_point(field:proto.BlockInfo.block_height)
    pub block_height: u64,
    ///  block_timestamp is the unix timestamp of the block
    // @@protoc_insertion_point(field:proto.BlockInfo.block_timestamp)
    pub block_timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:proto.BlockInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BlockInfo {
    fn default() -> &'a BlockInfo {
        <BlockInfo as ::protobuf::Message>::default_instance()
    }
}

impl BlockInfo {
    pub fn new() -> BlockInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_hash",
            |m: &BlockInfo| { &m.block_hash },
            |m: &mut BlockInfo| { &mut m.block_hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_height",
            |m: &BlockInfo| { &m.block_height },
            |m: &mut BlockInfo| { &mut m.block_height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_timestamp",
            |m: &BlockInfo| { &m.block_timestamp },
            |m: &mut BlockInfo| { &mut m.block_timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BlockInfo>(
            "BlockInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BlockInfo {
    const NAME: &'static str = "BlockInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.block_hash = is.read_string()?;
                },
                16 => {
                    self.block_height = is.read_uint64()?;
                },
                24 => {
                    self.block_timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.block_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.block_hash);
        }
        if self.block_height != 0 {
            my_size += ::protobuf::rt::uint64_size(2, self.block_height);
        }
        if self.block_timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(3, self.block_timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.block_hash.is_empty() {
            os.write_string(1, &self.block_hash)?;
        }
        if self.block_height != 0 {
            os.write_uint64(2, self.block_height)?;
        }
        if self.block_timestamp != 0 {
            os.write_uint64(3, self.block_timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BlockInfo {
        BlockInfo::new()
    }

    fn clear(&mut self) {
        self.block_hash.clear();
        self.block_height = 0;
        self.block_timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BlockInfo {
        static instance: BlockInfo = BlockInfo {
            block_hash: ::std::string::String::new(),
            block_height: 0,
            block_timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BlockInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BlockInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BlockInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BlockInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryIsBlockBabylonFinalizedRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryIsBlockBabylonFinalizedRequest {
    // message fields
    // @@protoc_insertion_point(field:proto.QueryIsBlockBabylonFinalizedRequest.block)
    pub block: ::protobuf::MessageField<BlockInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryIsBlockBabylonFinalizedRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryIsBlockBabylonFinalizedRequest {
    fn default() -> &'a QueryIsBlockBabylonFinalizedRequest {
        <QueryIsBlockBabylonFinalizedRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryIsBlockBabylonFinalizedRequest {
    pub fn new() -> QueryIsBlockBabylonFinalizedRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BlockInfo>(
            "block",
            |m: &QueryIsBlockBabylonFinalizedRequest| { &m.block },
            |m: &mut QueryIsBlockBabylonFinalizedRequest| { &mut m.block },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryIsBlockBabylonFinalizedRequest>(
            "QueryIsBlockBabylonFinalizedRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryIsBlockBabylonFinalizedRequest {
    const NAME: &'static str = "QueryIsBlockBabylonFinalizedRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryIsBlockBabylonFinalizedRequest {
        QueryIsBlockBabylonFinalizedRequest::new()
    }

    fn clear(&mut self) {
        self.block.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryIsBlockBabylonFinalizedRequest {
        static instance: QueryIsBlockBabylonFinalizedRequest = QueryIsBlockBabylonFinalizedRequest {
            block: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryIsBlockBabylonFinalizedRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryIsBlockBabylonFinalizedRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryIsBlockBabylonFinalizedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryIsBlockBabylonFinalizedRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryBlockRangeBabylonFinalizedRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryBlockRangeBabylonFinalizedRequest {
    // message fields
    ///  blocks is a list of blocks to query
    // @@protoc_insertion_point(field:proto.QueryBlockRangeBabylonFinalizedRequest.blocks)
    pub blocks: ::std::vec::Vec<BlockInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryBlockRangeBabylonFinalizedRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryBlockRangeBabylonFinalizedRequest {
    fn default() -> &'a QueryBlockRangeBabylonFinalizedRequest {
        <QueryBlockRangeBabylonFinalizedRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryBlockRangeBabylonFinalizedRequest {
    pub fn new() -> QueryBlockRangeBabylonFinalizedRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "blocks",
            |m: &QueryBlockRangeBabylonFinalizedRequest| { &m.blocks },
            |m: &mut QueryBlockRangeBabylonFinalizedRequest| { &mut m.blocks },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryBlockRangeBabylonFinalizedRequest>(
            "QueryBlockRangeBabylonFinalizedRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryBlockRangeBabylonFinalizedRequest {
    const NAME: &'static str = "QueryBlockRangeBabylonFinalizedRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.blocks.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.blocks {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.blocks {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryBlockRangeBabylonFinalizedRequest {
        QueryBlockRangeBabylonFinalizedRequest::new()
    }

    fn clear(&mut self) {
        self.blocks.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryBlockRangeBabylonFinalizedRequest {
        static instance: QueryBlockRangeBabylonFinalizedRequest = QueryBlockRangeBabylonFinalizedRequest {
            blocks: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryBlockRangeBabylonFinalizedRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryBlockRangeBabylonFinalizedRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryBlockRangeBabylonFinalizedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBlockRangeBabylonFinalizedRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryBlockRangeBabylonFinalizedResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryBlockRangeBabylonFinalizedResponse {
    // message fields
    ///  last_finalized_block_height is the height of the last finalized block
    // @@protoc_insertion_point(field:proto.QueryBlockRangeBabylonFinalizedResponse.last_finalized_block_height)
    pub last_finalized_block_height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryBlockRangeBabylonFinalizedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryBlockRangeBabylonFinalizedResponse {
    fn default() -> &'a QueryBlockRangeBabylonFinalizedResponse {
        <QueryBlockRangeBabylonFinalizedResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryBlockRangeBabylonFinalizedResponse {
    pub fn new() -> QueryBlockRangeBabylonFinalizedResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "last_finalized_block_height",
            |m: &QueryBlockRangeBabylonFinalizedResponse| { &m.last_finalized_block_height },
            |m: &mut QueryBlockRangeBabylonFinalizedResponse| { &mut m.last_finalized_block_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryBlockRangeBabylonFinalizedResponse>(
            "QueryBlockRangeBabylonFinalizedResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryBlockRangeBabylonFinalizedResponse {
    const NAME: &'static str = "QueryBlockRangeBabylonFinalizedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.last_finalized_block_height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.last_finalized_block_height != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.last_finalized_block_height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.last_finalized_block_height != 0 {
            os.write_uint64(1, self.last_finalized_block_height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryBlockRangeBabylonFinalizedResponse {
        QueryBlockRangeBabylonFinalizedResponse::new()
    }

    fn clear(&mut self) {
        self.last_finalized_block_height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryBlockRangeBabylonFinalizedResponse {
        static instance: QueryBlockRangeBabylonFinalizedResponse = QueryBlockRangeBabylonFinalizedResponse {
            last_finalized_block_height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryBlockRangeBabylonFinalizedResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryBlockRangeBabylonFinalizedResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryBlockRangeBabylonFinalizedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBlockRangeBabylonFinalizedResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryBtcStakingActivatedTimestampRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryBtcStakingActivatedTimestampRequest {
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryBtcStakingActivatedTimestampRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryBtcStakingActivatedTimestampRequest {
    fn default() -> &'a QueryBtcStakingActivatedTimestampRequest {
        <QueryBtcStakingActivatedTimestampRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryBtcStakingActivatedTimestampRequest {
    pub fn new() -> QueryBtcStakingActivatedTimestampRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryBtcStakingActivatedTimestampRequest>(
            "QueryBtcStakingActivatedTimestampRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryBtcStakingActivatedTimestampRequest {
    const NAME: &'static str = "QueryBtcStakingActivatedTimestampRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryBtcStakingActivatedTimestampRequest {
        QueryBtcStakingActivatedTimestampRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryBtcStakingActivatedTimestampRequest {
        static instance: QueryBtcStakingActivatedTimestampRequest = QueryBtcStakingActivatedTimestampRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryBtcStakingActivatedTimestampRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryBtcStakingActivatedTimestampRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryBtcStakingActivatedTimestampRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBtcStakingActivatedTimestampRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryBtcStakingActivatedTimestampResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryBtcStakingActivatedTimestampResponse {
    // message fields
    ///  timestamp is the unix timestamp when BTC staking was activated
    // @@protoc_insertion_point(field:proto.QueryBtcStakingActivatedTimestampResponse.activated_timestamp)
    pub activated_timestamp: u64,
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryBtcStakingActivatedTimestampResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryBtcStakingActivatedTimestampResponse {
    fn default() -> &'a QueryBtcStakingActivatedTimestampResponse {
        <QueryBtcStakingActivatedTimestampResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryBtcStakingActivatedTimestampResponse {
    pub fn new() -> QueryBtcStakingActivatedTimestampResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "activated_timestamp",
            |m: &QueryBtcStakingActivatedTimestampResponse| { &m.activated_timestamp },
            |m: &mut QueryBtcStakingActivatedTimestampResponse| { &mut m.activated_timestamp },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryBtcStakingActivatedTimestampResponse>(
            "QueryBtcStakingActivatedTimestampResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryBtcStakingActivatedTimestampResponse {
    const NAME: &'static str = "QueryBtcStakingActivatedTimestampResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.activated_timestamp = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.activated_timestamp != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.activated_timestamp);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.activated_timestamp != 0 {
            os.write_uint64(1, self.activated_timestamp)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryBtcStakingActivatedTimestampResponse {
        QueryBtcStakingActivatedTimestampResponse::new()
    }

    fn clear(&mut self) {
        self.activated_timestamp = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryBtcStakingActivatedTimestampResponse {
        static instance: QueryBtcStakingActivatedTimestampResponse = QueryBtcStakingActivatedTimestampResponse {
            activated_timestamp: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryBtcStakingActivatedTimestampResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryBtcStakingActivatedTimestampResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryBtcStakingActivatedTimestampResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBtcStakingActivatedTimestampResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryIsBlockFinalizedByHeightRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryIsBlockFinalizedByHeightRequest {
    // message fields
    ///  block_height is the height of the block
    // @@protoc_insertion_point(field:proto.QueryIsBlockFinalizedByHeightRequest.block_height)
    pub block_height: u64,
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryIsBlockFinalizedByHeightRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryIsBlockFinalizedByHeightRequest {
    fn default() -> &'a QueryIsBlockFinalizedByHeightRequest {
        <QueryIsBlockFinalizedByHeightRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryIsBlockFinalizedByHeightRequest {
    pub fn new() -> QueryIsBlockFinalizedByHeightRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_height",
            |m: &QueryIsBlockFinalizedByHeightRequest| { &m.block_height },
            |m: &mut QueryIsBlockFinalizedByHeightRequest| { &mut m.block_height },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryIsBlockFinalizedByHeightRequest>(
            "QueryIsBlockFinalizedByHeightRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryIsBlockFinalizedByHeightRequest {
    const NAME: &'static str = "QueryIsBlockFinalizedByHeightRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.block_height = is.read_uint64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.block_height != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.block_height);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.block_height != 0 {
            os.write_uint64(1, self.block_height)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryIsBlockFinalizedByHeightRequest {
        QueryIsBlockFinalizedByHeightRequest::new()
    }

    fn clear(&mut self) {
        self.block_height = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryIsBlockFinalizedByHeightRequest {
        static instance: QueryIsBlockFinalizedByHeightRequest = QueryIsBlockFinalizedByHeightRequest {
            block_height: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryIsBlockFinalizedByHeightRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryIsBlockFinalizedByHeightRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryIsBlockFinalizedByHeightRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryIsBlockFinalizedByHeightRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryIsBlockFinalizedByHashRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryIsBlockFinalizedByHashRequest {
    // message fields
    ///  block_hash is the hash of the block
    // @@protoc_insertion_point(field:proto.QueryIsBlockFinalizedByHashRequest.block_hash)
    pub block_hash: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryIsBlockFinalizedByHashRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryIsBlockFinalizedByHashRequest {
    fn default() -> &'a QueryIsBlockFinalizedByHashRequest {
        <QueryIsBlockFinalizedByHashRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryIsBlockFinalizedByHashRequest {
    pub fn new() -> QueryIsBlockFinalizedByHashRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "block_hash",
            |m: &QueryIsBlockFinalizedByHashRequest| { &m.block_hash },
            |m: &mut QueryIsBlockFinalizedByHashRequest| { &mut m.block_hash },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryIsBlockFinalizedByHashRequest>(
            "QueryIsBlockFinalizedByHashRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryIsBlockFinalizedByHashRequest {
    const NAME: &'static str = "QueryIsBlockFinalizedByHashRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.block_hash = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.block_hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.block_hash);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.block_hash.is_empty() {
            os.write_string(1, &self.block_hash)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryIsBlockFinalizedByHashRequest {
        QueryIsBlockFinalizedByHashRequest::new()
    }

    fn clear(&mut self) {
        self.block_hash.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryIsBlockFinalizedByHashRequest {
        static instance: QueryIsBlockFinalizedByHashRequest = QueryIsBlockFinalizedByHashRequest {
            block_hash: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryIsBlockFinalizedByHashRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryIsBlockFinalizedByHashRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryIsBlockFinalizedByHashRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryIsBlockFinalizedByHashRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryIsBlockFinalizedResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryIsBlockFinalizedResponse {
    // message fields
    ///  is_finalized is true if the block is finalized
    // @@protoc_insertion_point(field:proto.QueryIsBlockFinalizedResponse.is_finalized)
    pub is_finalized: bool,
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryIsBlockFinalizedResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryIsBlockFinalizedResponse {
    fn default() -> &'a QueryIsBlockFinalizedResponse {
        <QueryIsBlockFinalizedResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryIsBlockFinalizedResponse {
    pub fn new() -> QueryIsBlockFinalizedResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "is_finalized",
            |m: &QueryIsBlockFinalizedResponse| { &m.is_finalized },
            |m: &mut QueryIsBlockFinalizedResponse| { &mut m.is_finalized },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryIsBlockFinalizedResponse>(
            "QueryIsBlockFinalizedResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryIsBlockFinalizedResponse {
    const NAME: &'static str = "QueryIsBlockFinalizedResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.is_finalized = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.is_finalized != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.is_finalized != false {
            os.write_bool(1, self.is_finalized)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryIsBlockFinalizedResponse {
        QueryIsBlockFinalizedResponse::new()
    }

    fn clear(&mut self) {
        self.is_finalized = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryIsBlockFinalizedResponse {
        static instance: QueryIsBlockFinalizedResponse = QueryIsBlockFinalizedResponse {
            is_finalized: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryIsBlockFinalizedResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryIsBlockFinalizedResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryIsBlockFinalizedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryIsBlockFinalizedResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryLatestFinalizedBlockRequest)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryLatestFinalizedBlockRequest {
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryLatestFinalizedBlockRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryLatestFinalizedBlockRequest {
    fn default() -> &'a QueryLatestFinalizedBlockRequest {
        <QueryLatestFinalizedBlockRequest as ::protobuf::Message>::default_instance()
    }
}

impl QueryLatestFinalizedBlockRequest {
    pub fn new() -> QueryLatestFinalizedBlockRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryLatestFinalizedBlockRequest>(
            "QueryLatestFinalizedBlockRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryLatestFinalizedBlockRequest {
    const NAME: &'static str = "QueryLatestFinalizedBlockRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryLatestFinalizedBlockRequest {
        QueryLatestFinalizedBlockRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryLatestFinalizedBlockRequest {
        static instance: QueryLatestFinalizedBlockRequest = QueryLatestFinalizedBlockRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryLatestFinalizedBlockRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryLatestFinalizedBlockRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryLatestFinalizedBlockRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryLatestFinalizedBlockRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:proto.QueryBlockResponse)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct QueryBlockResponse {
    // message fields
    // @@protoc_insertion_point(field:proto.QueryBlockResponse.block)
    pub block: ::protobuf::MessageField<BlockInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.QueryBlockResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a QueryBlockResponse {
    fn default() -> &'a QueryBlockResponse {
        <QueryBlockResponse as ::protobuf::Message>::default_instance()
    }
}

impl QueryBlockResponse {
    pub fn new() -> QueryBlockResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, BlockInfo>(
            "block",
            |m: &QueryBlockResponse| { &m.block },
            |m: &mut QueryBlockResponse| { &mut m.block },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<QueryBlockResponse>(
            "QueryBlockResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for QueryBlockResponse {
    const NAME: &'static str = "QueryBlockResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.block)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.block.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> QueryBlockResponse {
        QueryBlockResponse::new()
    }

    fn clear(&mut self) {
        self.block.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static QueryBlockResponse {
        static instance: QueryBlockResponse = QueryBlockResponse {
            block: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for QueryBlockResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("QueryBlockResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for QueryBlockResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QueryBlockResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x14finalitygadget.proto\x12\x05proto\"v\n\tBlockInfo\x12\x1d\n\nblock\
    _hash\x18\x01\x20\x01(\tR\tblockHash\x12!\n\x0cblock_height\x18\x02\x20\
    \x01(\x04R\x0bblockHeight\x12'\n\x0fblock_timestamp\x18\x03\x20\x01(\x04\
    R\x0eblockTimestamp\"M\n#QueryIsBlockBabylonFinalizedRequest\x12&\n\x05b\
    lock\x18\x01\x20\x01(\x0b2\x10.proto.BlockInfoR\x05block\"R\n&QueryBlock\
    RangeBabylonFinalizedRequest\x12(\n\x06blocks\x18\x01\x20\x03(\x0b2\x10.\
    proto.BlockInfoR\x06blocks\"h\n'QueryBlockRangeBabylonFinalizedResponse\
    \x12=\n\x1blast_finalized_block_height\x18\x01\x20\x01(\x04R\x18lastFina\
    lizedBlockHeight\"*\n(QueryBtcStakingActivatedTimestampRequest\"\\\n)Que\
    ryBtcStakingActivatedTimestampResponse\x12/\n\x13activated_timestamp\x18\
    \x01\x20\x01(\x04R\x12activatedTimestamp\"I\n$QueryIsBlockFinalizedByHei\
    ghtRequest\x12!\n\x0cblock_height\x18\x01\x20\x01(\x04R\x0bblockHeight\"\
    C\n\"QueryIsBlockFinalizedByHashRequest\x12\x1d\n\nblock_hash\x18\x01\
    \x20\x01(\tR\tblockHash\"B\n\x1dQueryIsBlockFinalizedResponse\x12!\n\x0c\
    is_finalized\x18\x01\x20\x01(\x08R\x0bisFinalized\"\"\n\x20QueryLatestFi\
    nalizedBlockRequest\"<\n\x12QueryBlockResponse\x12&\n\x05block\x18\x01\
    \x20\x01(\x0b2\x10.proto.BlockInfoR\x05block2\xd3\x05\n\x0eFinalityGadge\
    t\x12p\n\x1cQueryIsBlockBabylonFinalized\x12*.proto.QueryIsBlockBabylonF\
    inalizedRequest\x1a$.proto.QueryIsBlockFinalizedResponse\x12\x80\x01\n\
    \x1fQueryBlockRangeBabylonFinalized\x12-.proto.QueryBlockRangeBabylonFin\
    alizedRequest\x1a..proto.QueryBlockRangeBabylonFinalizedResponse\x12\x86\
    \x01\n!QueryBtcStakingActivatedTimestamp\x12/.proto.QueryBtcStakingActiv\
    atedTimestampRequest\x1a0.proto.QueryBtcStakingActivatedTimestampRespons\
    e\x12r\n\x1dQueryIsBlockFinalizedByHeight\x12+.proto.QueryIsBlockFinaliz\
    edByHeightRequest\x1a$.proto.QueryIsBlockFinalizedResponse\x12n\n\x1bQue\
    ryIsBlockFinalizedByHash\x12).proto.QueryIsBlockFinalizedByHashRequest\
    \x1a$.proto.QueryIsBlockFinalizedResponse\x12_\n\x19QueryLatestFinalized\
    Block\x12'.proto.QueryLatestFinalizedBlockRequest\x1a\x19.proto.QueryBlo\
    ckResponseB1Z/github.com/babylonlabs-io/finality-gadget/protoJ\xc9\x12\n\
    \x06\x12\x04\0\0T3\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\0\x0e\n\x08\n\x01\x08\x12\x03\x04\0F\n\t\n\x02\x08\x0b\x12\x03\
    \x04\0F\n\n\n\x02\x06\0\x12\x04\x06\0%\x01\n\n\n\x03\x06\0\x01\x12\x03\
    \x06\x08\x16\nn\n\x04\x06\0\x02\0\x12\x04\t\x02\n.\x1a`\x20QueryIsBlockB\
    abylonFinalized\x20returns\x20the\x20finality\x20status\x20of\x20a\x20bl\
    ock\x20by\n\x20querying\x20Babylon\x20chain\n\n\x0c\n\x05\x06\0\x02\0\
    \x01\x12\x03\t\x06\"\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\t#F\n\x0c\n\x05\
    \x06\0\x02\0\x03\x12\x03\n\x0f,\n\x87\x01\n\x04\x06\0\x02\x01\x12\x04\
    \x0e\x02\x0f8\x1ay\x20QueryBlockRangeBabylonFinalized\x20returns\x20the\
    \x20last\x20finalized\x20block\x20height\n\x20within\x20a\x20block\x20ra\
    nge\x20by\x20querying\x20Babylon\x20chain\n\n\x0c\n\x05\x06\0\x02\x01\
    \x01\x12\x03\x0e\x06%\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x0e&L\n\x0c\
    \n\x05\x06\0\x02\x01\x03\x12\x03\x0f\x0f6\ng\n\x04\x06\0\x02\x02\x12\x04\
    \x13\x02\x15:\x1aY\x20QueryBtcStakingActivatedTimestamp\x20returns\x20th\
    e\x20timestamp\x20when\x20BTC\x20staking\n\x20was\x20activated\n\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03\x13\x06'\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03\x14\x06.\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x15\x0f8\n~\n\
    \x04\x06\0\x02\x03\x12\x04\x19\x02\x1a.\x1ap\x20QueryIsBlockFinalizedByH\
    eight\x20returns\x20the\x20finality\x20status\x20of\x20a\x20block\x20at\
    \n\x20given\x20height\x20by\x20querying\x20the\x20local\x20db\n\n\x0c\n\
    \x05\x06\0\x02\x03\x01\x12\x03\x19\x06#\n\x0c\n\x05\x06\0\x02\x03\x02\
    \x12\x03\x19$H\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x1a\x0f,\n|\n\x04\
    \x06\0\x02\x04\x12\x04\x1e\x02\x1f.\x1an\x20QueryIsBlockFinalizedByHash\
    \x20returns\x20the\x20finality\x20status\x20of\x20a\x20block\x20with\n\
    \x20given\x20hash\x20by\x20querying\x20the\x20local\x20db\n\n\x0c\n\x05\
    \x06\0\x02\x04\x01\x12\x03\x1e\x06!\n\x0c\n\x05\x06\0\x02\x04\x02\x12\
    \x03\x1e\"D\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x1f\x0f,\nt\n\x04\x06\
    \0\x02\x05\x12\x04#\x02$#\x1af\x20QueryLatestFinalizedBlock\x20returns\
    \x20the\x20latest\x20consecutively\x20finalized\x20block\n\x20by\x20quer\
    ying\x20the\x20local\x20db\n\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03#\x06\
    \x1f\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03#\x20@\n\x0c\n\x05\x06\0\x02\
    \x05\x03\x12\x03$\x0f!\n\n\n\x02\x04\0\x12\x04'\0.\x01\n\n\n\x03\x04\0\
    \x01\x12\x03'\x08\x11\n2\n\x04\x04\0\x02\0\x12\x03)\x02\x18\x1a%\x20bloc\
    k_hash\x20is\x20the\x20hash\x20of\x20the\x20block\n\n\x0c\n\x05\x04\0\
    \x02\0\x05\x12\x03)\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03)\t\x13\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03)\x16\x17\n6\n\x04\x04\0\x02\x01\x12\
    \x03+\x02\x1a\x1a)\x20block_height\x20is\x20the\x20height\x20of\x20the\
    \x20block\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03+\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03+\t\x15\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03+\
    \x18\x19\nA\n\x04\x04\0\x02\x02\x12\x03-\x02\x1d\x1a4\x20block_timestamp\
    \x20is\x20the\x20unix\x20timestamp\x20of\x20the\x20block\n\n\x0c\n\x05\
    \x04\0\x02\x02\x05\x12\x03-\x02\x08\n\x0c\n\x05\x04\0\x02\x02\x01\x12\
    \x03-\t\x18\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03-\x1b\x1c\n\t\n\x02\x04\
    \x01\x12\x030\0D\n\n\n\x03\x04\x01\x01\x12\x030\x08+\n\x0b\n\x04\x04\x01\
    \x02\0\x12\x030.B\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x030.7\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x0308=\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x030@A\n\
    \n\n\x02\x04\x02\x12\x042\05\x01\n\n\n\x03\x04\x02\x01\x12\x032\x08.\n2\
    \n\x04\x04\x02\x02\0\x12\x034\x02\x20\x1a%\x20blocks\x20is\x20a\x20list\
    \x20of\x20blocks\x20to\x20query\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x034\
    \x02\n\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x034\x0b\x14\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x034\x15\x1b\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x034\
    \x1e\x1f\n\n\n\x02\x04\x03\x12\x047\0:\x01\n\n\n\x03\x04\x03\x01\x12\x03\
    7\x08/\nT\n\x04\x04\x03\x02\0\x12\x039\x02)\x1aG\x20last_finalized_block\
    _height\x20is\x20the\x20height\x20of\x20the\x20last\x20finalized\x20bloc\
    k\n\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x039\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x039\t$\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x039'(\n\t\n\
    \x02\x04\x04\x12\x03<\03\n\n\n\x03\x04\x04\x01\x12\x03<\x080\n\n\n\x02\
    \x04\x05\x12\x04>\0A\x01\n\n\n\x03\x04\x05\x01\x12\x03>\x081\nM\n\x04\
    \x04\x05\x02\0\x12\x03@\x02!\x1a@\x20timestamp\x20is\x20the\x20unix\x20t\
    imestamp\x20when\x20BTC\x20staking\x20was\x20activated\n\n\x0c\n\x05\x04\
    \x05\x02\0\x05\x12\x03@\x02\x08\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03@\t\
    \x1c\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03@\x1f\x20\n\n\n\x02\x04\x06\
    \x12\x04C\0F\x01\n\n\n\x03\x04\x06\x01\x12\x03C\x08,\n6\n\x04\x04\x06\
    \x02\0\x12\x03E\x02\x1a\x1a)\x20block_height\x20is\x20the\x20height\x20o\
    f\x20the\x20block\n\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03E\x02\x08\n\x0c\
    \n\x05\x04\x06\x02\0\x01\x12\x03E\t\x15\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03E\x18\x19\n\n\n\x02\x04\x07\x12\x04H\0K\x01\n\n\n\x03\x04\x07\
    \x01\x12\x03H\x08*\n2\n\x04\x04\x07\x02\0\x12\x03J\x02\x18\x1a%\x20block\
    _hash\x20is\x20the\x20hash\x20of\x20the\x20block\n\n\x0c\n\x05\x04\x07\
    \x02\0\x05\x12\x03J\x02\x08\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03J\t\x13\
    \n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03J\x16\x17\n\n\n\x02\x04\x08\x12\
    \x04M\0P\x01\n\n\n\x03\x04\x08\x01\x12\x03M\x08%\n=\n\x04\x04\x08\x02\0\
    \x12\x03O\x02\x18\x1a0\x20is_finalized\x20is\x20true\x20if\x20the\x20blo\
    ck\x20is\x20finalized\n\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03O\x02\x06\n\
    \x0c\n\x05\x04\x08\x02\0\x01\x12\x03O\x07\x13\n\x0c\n\x05\x04\x08\x02\0\
    \x03\x12\x03O\x16\x17\n\t\n\x02\x04\t\x12\x03R\0+\n\n\n\x03\x04\t\x01\
    \x12\x03R\x08(\n\t\n\x02\x04\n\x12\x03T\03\n\n\n\x03\x04\n\x01\x12\x03T\
    \x08\x1a\n\x0b\n\x04\x04\n\x02\0\x12\x03T\x1d1\n\x0c\n\x05\x04\n\x02\0\
    \x06\x12\x03T\x1d&\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03T',\n\x0c\n\x05\
    \x04\n\x02\0\x03\x12\x03T/0b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(BlockInfo::generated_message_descriptor_data());
            messages.push(QueryIsBlockBabylonFinalizedRequest::generated_message_descriptor_data());
            messages.push(QueryBlockRangeBabylonFinalizedRequest::generated_message_descriptor_data());
            messages.push(QueryBlockRangeBabylonFinalizedResponse::generated_message_descriptor_data());
            messages.push(QueryBtcStakingActivatedTimestampRequest::generated_message_descriptor_data());
            messages.push(QueryBtcStakingActivatedTimestampResponse::generated_message_descriptor_data());
            messages.push(QueryIsBlockFinalizedByHeightRequest::generated_message_descriptor_data());
            messages.push(QueryIsBlockFinalizedByHashRequest::generated_message_descriptor_data());
            messages.push(QueryIsBlockFinalizedResponse::generated_message_descriptor_data());
            messages.push(QueryLatestFinalizedBlockRequest::generated_message_descriptor_data());
            messages.push(QueryBlockResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}

include!("finaltitygadget_grpc.rs");
// @@protoc_insertion_point(module)