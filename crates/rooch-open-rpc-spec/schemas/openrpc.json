{
  "openrpc": "1.2.6",
  "info": {
    "title": "Rooch JSON-RPC",
    "description": "Rooch JSON-RPC API for interaction with rooch server. ",
    "contact": {
      "name": "Rooch Network",
      "url": "https://rooch.network",
      "email": "opensource@rooch.network"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://raw.githubusercontent.com/rooch-network/rooch/main/LICENSE"
    },
    "version": "0.5.5"
  },
  "methods": [
    {
      "name": "btc_queryInscriptions",
      "description": "Query the Inscription via global index by Inscription filter",
      "params": [
        {
          "name": "filter",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/InscriptionFilterView"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "$ref": "#/components/schemas/IndexerStateID"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/usize"
          }
        },
        {
          "name": "descending_order",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "InscriptionPageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_InscriptionStateView_and_IndexerStateID"
        }
      }
    },
    {
      "name": "btc_queryUTXOs",
      "description": "Query the UTXO via global index by UTXO filter",
      "params": [
        {
          "name": "filter",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/UTXOFilterView"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "$ref": "#/components/schemas/IndexerStateID"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/usize"
          }
        },
        {
          "name": "descending_order",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "UTXOPageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_UTXOStateView_and_IndexerStateID"
        }
      }
    },
    {
      "name": "rooch_executeRawTransaction",
      "description": "Send the signed transaction in bcs hex format This method blocks waiting for the transaction to be executed.",
      "params": [
        {
          "name": "tx_bcs_hex",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          }
        },
        {
          "name": "tx_option",
          "schema": {
            "$ref": "#/components/schemas/TxOptions"
          }
        }
      ],
      "result": {
        "name": "ExecuteTransactionResponseView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ExecuteTransactionResponseView"
        }
      }
    },
    {
      "name": "rooch_executeViewFunction",
      "description": "Execute a read-only function call The function do not change the state of Application",
      "params": [
        {
          "name": "function_call",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/FunctionCallView"
          }
        }
      ],
      "result": {
        "name": "AnnotatedFunctionResultView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/AnnotatedFunctionResultView"
        }
      }
    },
    {
      "name": "rooch_getBalance",
      "description": "get account balance by RoochAddress and CoinType",
      "params": [
        {
          "name": "account_addr",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/rooch_rpc_api::jsonrpc_types::address::RoochOrBitcoinAddress"
          }
        },
        {
          "name": "coin_type",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          }
        }
      ],
      "result": {
        "name": "BalanceInfoView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/BalanceInfoView"
        }
      }
    },
    {
      "name": "rooch_getBalances",
      "description": "get account balances by RoochAddress",
      "params": [
        {
          "name": "account_addr",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/rooch_rpc_api::jsonrpc_types::address::RoochOrBitcoinAddress"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "$ref": "#/components/schemas/IndexerStateID"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/usize"
          }
        }
      ],
      "result": {
        "name": "BalanceInfoPageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_BalanceInfoView_and_IndexerStateID"
        }
      }
    },
    {
      "name": "rooch_getChainID",
      "params": [],
      "result": {
        "name": "StrView<u64>",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/u64"
        }
      }
    },
    {
      "name": "rooch_getEventsByEventHandle",
      "description": "Get the events by event handle id",
      "params": [
        {
          "name": "event_handle_type",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "$ref": "#/components/schemas/u64"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/u64"
          }
        },
        {
          "name": "descending_order",
          "schema": {
            "type": "boolean"
          }
        },
        {
          "name": "event_options",
          "schema": {
            "$ref": "#/components/schemas/EventOptions"
          }
        }
      ],
      "result": {
        "name": "EventPageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_EventView_and_uint64"
        }
      }
    },
    {
      "name": "rooch_getFieldStates",
      "description": "Get Object Fields via ObjectID and field keys.",
      "params": [
        {
          "name": "object_id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "field_key",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyStateHexView"
            }
          }
        },
        {
          "name": "state_option",
          "schema": {
            "$ref": "#/components/schemas/StateOptions"
          }
        }
      ],
      "result": {
        "name": "Vec<Option<StateView>>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StateView"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      }
    },
    {
      "name": "rooch_getObjectStates",
      "description": "Get object states by object id",
      "params": [
        {
          "name": "object_ids",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/alloc::vec::Vec<moveos_types::moveos_std::object::ObjectID>"
          }
        },
        {
          "name": "state_option",
          "schema": {
            "$ref": "#/components/schemas/StateOptions"
          }
        }
      ],
      "result": {
        "name": "Vec<Option<ObjectStateView>>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ObjectStateView"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      }
    },
    {
      "name": "rooch_getStates",
      "description": "Get the states by access_path If the StateOptions.decode is true, the state is decoded and the decoded value is returned in the response.",
      "params": [
        {
          "name": "access_path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/moveos_types::access_path::AccessPath"
          }
        },
        {
          "name": "state_option",
          "schema": {
            "$ref": "#/components/schemas/StateOptions"
          }
        }
      ],
      "result": {
        "name": "Vec<Option<StateView>>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/StateView"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      }
    },
    {
      "name": "rooch_getTransactionsByHash",
      "params": [
        {
          "name": "tx_hashes",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/primitive_types::H256"
            }
          }
        }
      ],
      "result": {
        "name": "Vec<Option<TransactionWithInfoView>>",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionWithInfoView"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      }
    },
    {
      "name": "rooch_getTransactionsByOrder",
      "params": [
        {
          "name": "cursor",
          "schema": {
            "$ref": "#/components/schemas/u64"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/u64"
          }
        },
        {
          "name": "descending_order",
          "schema": {
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "TransactionWithInfoPageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_TransactionWithInfoView_and_uint64"
        }
      }
    },
    {
      "name": "rooch_listFieldStates",
      "description": "List Object Fields via ObjectID.",
      "params": [
        {
          "name": "object_id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/usize"
          }
        },
        {
          "name": "state_option",
          "schema": {
            "$ref": "#/components/schemas/StateOptions"
          }
        }
      ],
      "result": {
        "name": "StatePageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_StateKVView_and_String"
        }
      }
    },
    {
      "name": "rooch_listStates",
      "description": "List the states by access_path If the StateOptions.decode is true, the state is decoded and the decoded value is returned in the response.",
      "params": [
        {
          "name": "access_path",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/moveos_types::access_path::AccessPath"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/usize"
          }
        },
        {
          "name": "state_option",
          "schema": {
            "$ref": "#/components/schemas/StateOptions"
          }
        }
      ],
      "result": {
        "name": "StatePageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_StateKVView_and_String"
        }
      }
    },
    {
      "name": "rooch_queryEvents",
      "description": "Query the events indexer by event filter",
      "params": [
        {
          "name": "filter",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/EventFilterView"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "$ref": "#/components/schemas/IndexerEventID"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/usize"
          }
        },
        {
          "name": "query_option",
          "schema": {
            "$ref": "#/components/schemas/QueryOptions"
          }
        }
      ],
      "result": {
        "name": "IndexerEventPageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_IndexerEventView_and_IndexerEventID"
        }
      }
    },
    {
      "name": "rooch_queryObjectStates",
      "description": "Query the object states indexer by state filter",
      "params": [
        {
          "name": "filter",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectStateFilterView"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "$ref": "#/components/schemas/IndexerStateID"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/usize"
          }
        },
        {
          "name": "query_option",
          "schema": {
            "$ref": "#/components/schemas/QueryOptions"
          }
        }
      ],
      "result": {
        "name": "IndexerObjectStatePageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_IndexerObjectStateView_and_IndexerStateID"
        }
      }
    },
    {
      "name": "rooch_queryTransactions",
      "description": "Query the transactions indexer by transaction filter",
      "params": [
        {
          "name": "filter",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionFilterView"
          }
        },
        {
          "name": "cursor",
          "schema": {
            "$ref": "#/components/schemas/u64"
          }
        },
        {
          "name": "limit",
          "schema": {
            "$ref": "#/components/schemas/usize"
          }
        },
        {
          "name": "query_option",
          "schema": {
            "$ref": "#/components/schemas/QueryOptions"
          }
        }
      ],
      "result": {
        "name": "TransactionWithInfoPageView",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/PageView_for_TransactionWithInfoView_and_uint64"
        }
      }
    },
    {
      "name": "rooch_sendRawTransaction",
      "description": "Send the signed transaction in bcs hex format This method does not block waiting for the transaction to be executed.",
      "params": [
        {
          "name": "tx_bcs_hex",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          }
        }
      ],
      "result": {
        "name": "H256View",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/primitive_types::H256"
        }
      }
    }
  ],
  "components": {
    "schemas": {
      "AnnotatedFunctionResultView": {
        "type": "object",
        "required": [
          "vm_status"
        ],
        "properties": {
          "return_values": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/AnnotatedFunctionReturnValueView"
            }
          },
          "vm_status": {
            "$ref": "#/components/schemas/VMStatusView"
          }
        }
      },
      "AnnotatedFunctionReturnValueView": {
        "type": "object",
        "required": [
          "decoded_value",
          "value"
        ],
        "properties": {
          "decoded_value": {
            "$ref": "#/components/schemas/AnnotatedMoveValueView"
          },
          "value": {
            "$ref": "#/components/schemas/FunctionReturnValueView"
          }
        }
      },
      "AnnotatedMoveStructView": {
        "type": "object",
        "required": [
          "abilities",
          "type",
          "value"
        ],
        "properties": {
          "abilities": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "type": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          },
          "value": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/AnnotatedMoveValueView"
            }
          }
        }
      },
      "AnnotatedMoveValueView": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          {
            "description": "u64, u128, U256 is too large to be serialized in json so we use string to represent them",
            "allOf": [
              {
                "$ref": "#/components/schemas/u64"
              }
            ]
          },
          {
            "$ref": "#/components/schemas/u128"
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/move_core_types::account_address::AccountAddress"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AnnotatedMoveValueView"
            }
          },
          {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          },
          {
            "$ref": "#/components/schemas/AnnotatedMoveStructView"
          },
          {
            "$ref": "#/components/schemas/SpecificStructView"
          },
          {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          {
            "$ref": "#/components/schemas/move_core_types::u256::U256"
          }
        ]
      },
      "BalanceInfoView": {
        "type": "object",
        "required": [
          "balance",
          "coin_type",
          "decimals",
          "name",
          "supply",
          "symbol"
        ],
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/move_core_types::u256::U256"
          },
          "coin_type": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          },
          "decimals": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "name": {
            "type": "string"
          },
          "supply": {
            "$ref": "#/components/schemas/move_core_types::u256::U256"
          },
          "symbol": {
            "type": "string"
          }
        }
      },
      "DisplayFieldsView": {
        "type": "object",
        "required": [
          "fields"
        ],
        "properties": {
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "EventFilterView": {
        "oneOf": [
          {
            "description": "Query by event type.",
            "type": "object",
            "required": [
              "event_type"
            ],
            "properties": {
              "event_type": {
                "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by sender address.",
            "type": "object",
            "required": [
              "sender"
            ],
            "properties": {
              "sender": {
                "$ref": "#/components/schemas/rooch_rpc_api::jsonrpc_types::address::RoochOrBitcoinAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted by the given transaction hash.",
            "type": "object",
            "required": [
              "tx_hash"
            ],
            "properties": {
              "tx_hash": {
                "$ref": "#/components/schemas/primitive_types::H256"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in [start_time, end_time) interval",
            "type": "object",
            "required": [
              "time_range"
            ],
            "properties": {
              "time_range": {
                "type": "object",
                "required": [
                  "end_time",
                  "start_time"
                ],
                "properties": {
                  "end_time": {
                    "description": "right endpoint of time interval, milliseconds since block, exclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "start_time": {
                    "description": "left endpoint of time interval, milliseconds since block, inclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in [from_order, to_order) interval",
            "type": "object",
            "required": [
              "tx_order_range"
            ],
            "properties": {
              "tx_order_range": {
                "type": "object",
                "required": [
                  "from_order",
                  "to_order"
                ],
                "properties": {
                  "from_order": {
                    "description": "left endpoint of transaction order, inclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "to_order": {
                    "description": "right endpoint of transaction order, exclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "EventID": {
        "description": "A struct that represents a globally unique id for an Event stream that a user can listen to. the Unique ID is a combination of event handle id and event seq number. the ID is local to this particular fullnode and will be different from other fullnode.",
        "type": "object",
        "required": [
          "event_handle_id",
          "event_seq"
        ],
        "properties": {
          "event_handle_id": {
            "description": "each event handle corresponds to a unique event handle id. event handler id equal to guid.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "event_seq": {
            "description": "For expansion: The number of messages that have been emitted to the path previously",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "EventOptions": {
        "type": "object",
        "properties": {
          "decode": {
            "description": "If true, the event is decoded and the decoded value is returned in the response.",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "EventView": {
        "type": "object",
        "required": [
          "event_data",
          "event_id",
          "event_index",
          "event_type"
        ],
        "properties": {
          "decoded_event_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotatedMoveStructView"
              },
              {
                "type": "null"
              }
            ]
          },
          "event_data": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          },
          "event_id": {
            "$ref": "#/components/schemas/EventID"
          },
          "event_index": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "event_type": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          }
        }
      },
      "ExecuteTransactionResponseView": {
        "type": "object",
        "required": [
          "execution_info",
          "sequence_info"
        ],
        "properties": {
          "execution_info": {
            "$ref": "#/components/schemas/TransactionExecutionInfoView"
          },
          "output": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/TransactionOutputView"
              },
              {
                "type": "null"
              }
            ]
          },
          "sequence_info": {
            "$ref": "#/components/schemas/TransactionSequenceInfoView"
          }
        }
      },
      "FieldChangeView": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "fields",
              "key",
              "key_state",
              "type"
            ],
            "properties": {
              "fields": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FieldChangeView"
                }
              },
              "key": {
                "$ref": "#/components/schemas/KeyStateHexView"
              },
              "key_state": {
                "type": "string"
              },
              "op": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/OpView_for_StateView"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "object"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "key",
              "key_state",
              "op",
              "type"
            ],
            "properties": {
              "key": {
                "$ref": "#/components/schemas/KeyStateHexView"
              },
              "key_state": {
                "type": "string"
              },
              "op": {
                "$ref": "#/components/schemas/OpView_for_StateView"
              },
              "type": {
                "type": "string",
                "enum": [
                  "normal"
                ]
              }
            }
          }
        ]
      },
      "FunctionCallView": {
        "type": "object",
        "required": [
          "args",
          "function_id",
          "ty_args"
        ],
        "properties": {
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
            }
          },
          "function_id": {
            "$ref": "#/components/schemas/moveos_types::move_types::FunctionId"
          },
          "ty_args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/move_core_types::language_storage::TypeTag"
            }
          }
        }
      },
      "FunctionReturnValueView": {
        "type": "object",
        "required": [
          "type_tag",
          "value"
        ],
        "properties": {
          "type_tag": {
            "$ref": "#/components/schemas/move_core_types::language_storage::TypeTag"
          },
          "value": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          }
        }
      },
      "Hex": {
        "description": "Hex string encoding.",
        "type": "string"
      },
      "IndexerEventID": {
        "type": "object",
        "required": [
          "event_index",
          "tx_order"
        ],
        "properties": {
          "event_index": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "tx_order": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "IndexerEventView": {
        "type": "object",
        "required": [
          "created_at",
          "event_data",
          "event_id",
          "event_type",
          "indexer_event_id",
          "sender",
          "tx_hash"
        ],
        "properties": {
          "created_at": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "decoded_event_data": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotatedMoveStructView"
              },
              {
                "type": "null"
              }
            ]
          },
          "event_data": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          },
          "event_id": {
            "$ref": "#/components/schemas/EventID"
          },
          "event_type": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          },
          "indexer_event_id": {
            "$ref": "#/components/schemas/IndexerEventID"
          },
          "sender": {
            "$ref": "#/components/schemas/rooch_types::address::RoochAddress"
          },
          "tx_hash": {
            "$ref": "#/components/schemas/primitive_types::H256"
          }
        }
      },
      "IndexerObjectStateView": {
        "type": "object",
        "required": [
          "created_at",
          "flag",
          "object_id",
          "object_type",
          "owner",
          "size",
          "state_index",
          "state_root",
          "tx_order",
          "updated_at",
          "value"
        ],
        "properties": {
          "created_at": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "decoded_value": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotatedMoveStructView"
              },
              {
                "type": "null"
              }
            ]
          },
          "display_fields": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DisplayFieldsView"
              },
              {
                "type": "null"
              }
            ]
          },
          "flag": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "object_id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          },
          "owner": {
            "$ref": "#/components/schemas/rooch_types::address::RoochAddress"
          },
          "owner_bitcoin_address": {
            "type": [
              "string",
              "null"
            ]
          },
          "size": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "state_index": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "state_root": {
            "$ref": "#/components/schemas/primitive_types::H256"
          },
          "tx_order": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "updated_at": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "value": {
            "description": "bcs bytes of the Object.",
            "allOf": [
              {
                "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
              }
            ]
          }
        }
      },
      "IndexerStateID": {
        "type": "object",
        "required": [
          "state_index",
          "tx_order"
        ],
        "properties": {
          "state_index": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "tx_order": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "InscriptionFilterView": {
        "oneOf": [
          {
            "description": "Query by owner, represent by bitcoin address",
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/rooch_types::address::BitcoinAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by inscription id, represent by bitcoin txid and index",
            "type": "object",
            "required": [
              "inscription_id"
            ],
            "properties": {
              "inscription_id": {
                "type": "object",
                "required": [
                  "index",
                  "txid"
                ],
                "properties": {
                  "index": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "txid": {
                    "type": "string"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by object id.",
            "type": "object",
            "required": [
              "object_id"
            ],
            "properties": {
              "object_id": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query all.",
            "type": "string",
            "enum": [
              "all"
            ]
          }
        ]
      },
      "InscriptionStateView": {
        "type": "object",
        "required": [
          "created_at",
          "flag",
          "object_id",
          "object_type",
          "owner",
          "state_index",
          "tx_order",
          "updated_at",
          "value"
        ],
        "properties": {
          "created_at": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "flag": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "object_id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          },
          "owner": {
            "$ref": "#/components/schemas/rooch_types::address::RoochAddress"
          },
          "owner_bitcoin_address": {
            "type": [
              "string",
              "null"
            ]
          },
          "state_index": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "tx_order": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "updated_at": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "value": {
            "$ref": "#/components/schemas/InscriptionView"
          }
        }
      },
      "InscriptionView": {
        "type": "object",
        "required": [
          "bitcoin_txid",
          "body",
          "index",
          "inscription_number",
          "is_curse",
          "metadata",
          "offset",
          "parents",
          "sequence_number",
          "txid"
        ],
        "properties": {
          "bitcoin_txid": {
            "$ref": "#/components/schemas/bitcoin::hash_types::newtypes::Txid"
          },
          "body": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          },
          "content_encoding": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/moveos_types::move_std::string::MoveString"
              },
              {
                "type": "null"
              }
            ]
          },
          "content_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/moveos_types::move_std::string::MoveString"
              },
              {
                "type": "null"
              }
            ]
          },
          "index": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "inscription_number": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "is_curse": {
            "type": "boolean"
          },
          "metadata": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          },
          "metaprotocol": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/moveos_types::move_std::string::MoveString"
              },
              {
                "type": "null"
              }
            ]
          },
          "offset": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "parents": {
            "$ref": "#/components/schemas/alloc::vec::Vec<moveos_types::moveos_std::object::ObjectID>"
          },
          "pointer": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          },
          "sequence_number": {
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "txid": {
            "$ref": "#/components/schemas/primitive_types::H256"
          }
        }
      },
      "KeptVMStatusView": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "executed"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "outofgas"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "abort_code",
              "location",
              "type"
            ],
            "properties": {
              "abort_code": {
                "$ref": "#/components/schemas/u64"
              },
              "location": {
                "$ref": "#/components/schemas/move_core_types::vm_status::AbortLocation"
              },
              "type": {
                "type": "string",
                "enum": [
                  "moveabort"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "code_offset",
              "function",
              "location",
              "type"
            ],
            "properties": {
              "code_offset": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              },
              "function": {
                "type": "integer",
                "format": "uint16",
                "minimum": 0.0
              },
              "location": {
                "$ref": "#/components/schemas/move_core_types::vm_status::AbortLocation"
              },
              "type": {
                "type": "string",
                "enum": [
                  "executionfailure"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "miscellaneouserror"
                ]
              }
            }
          }
        ]
      },
      "KeyStateHexView": {
        "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
      },
      "LedgerTransactionView": {
        "type": "object",
        "required": [
          "data",
          "sequence_info"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/LedgerTxDataView"
          },
          "sequence_info": {
            "$ref": "#/components/schemas/TransactionSequenceInfoView"
          }
        }
      },
      "LedgerTxDataView": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "block_hash",
              "block_height",
              "chain_id",
              "type"
            ],
            "properties": {
              "block_hash": {
                "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
              },
              "block_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "chain_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "type": {
                "type": "string",
                "enum": [
                  "l1_block"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "block_hash",
              "chain_id",
              "txid",
              "type"
            ],
            "properties": {
              "block_hash": {
                "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
              },
              "chain_id": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "txid": {
                "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
              },
              "type": {
                "type": "string",
                "enum": [
                  "l1_tx"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "action",
              "action_type",
              "raw",
              "sender",
              "sequence_number",
              "type"
            ],
            "properties": {
              "action": {
                "$ref": "#/components/schemas/MoveActionView"
              },
              "action_type": {
                "$ref": "#/components/schemas/MoveActionTypeView"
              },
              "raw": {
                "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
              },
              "sender": {
                "type": "string"
              },
              "sender_bitcoin_address": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "sequence_number": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              "type": {
                "type": "string",
                "enum": [
                  "l2_tx"
                ]
              }
            }
          }
        ]
      },
      "MoveActionTypeView": {
        "type": "string",
        "enum": [
          "scriptcall",
          "functioncall",
          "modulebundle"
        ]
      },
      "MoveActionView": {
        "type": "object",
        "properties": {
          "function_call": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/FunctionCallView"
              },
              {
                "type": "null"
              }
            ]
          },
          "module_bundle": {
            "type": [
              "array",
              "null"
            ],
            "items": {
              "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
            }
          },
          "script_call": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ScriptCallView"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "MoveAsciiString": {
        "type": "object",
        "required": [
          "bytes"
        ],
        "properties": {
          "bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "MoveString": {
        "type": "object",
        "required": [
          "bytes"
        ],
        "properties": {
          "bytes": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "ObjectChangeView": {
        "type": "object",
        "required": [
          "fields"
        ],
        "properties": {
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldChangeView"
            }
          },
          "op": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/OpView_for_StateView"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "ObjectID": {
        "$ref": "#/components/schemas/Hex"
      },
      "ObjectStateFilterView": {
        "oneOf": [
          {
            "description": "Query by object value type and owner.",
            "type": "object",
            "required": [
              "object_type_with_owner"
            ],
            "properties": {
              "object_type_with_owner": {
                "type": "object",
                "required": [
                  "object_type",
                  "owner"
                ],
                "properties": {
                  "object_type": {
                    "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
                  },
                  "owner": {
                    "$ref": "#/components/schemas/rooch_rpc_api::jsonrpc_types::address::RoochOrBitcoinAddress"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by object value type.",
            "type": "object",
            "required": [
              "object_type"
            ],
            "properties": {
              "object_type": {
                "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by owner.",
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/rooch_rpc_api::jsonrpc_types::address::RoochOrBitcoinAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by object ids.",
            "type": "object",
            "required": [
              "object_id"
            ],
            "properties": {
              "object_id": {
                "$ref": "#/components/schemas/alloc::vec::Vec<moveos_types::moveos_std::object::ObjectID>"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "ObjectStateView": {
        "description": "Object state view. Used as return type of `getObjectStates`.",
        "type": "object",
        "required": [
          "created_at",
          "flag",
          "id",
          "object_type",
          "owner",
          "size",
          "state_root",
          "updated_at",
          "value"
        ],
        "properties": {
          "created_at": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "decoded_value": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotatedMoveStructView"
              },
              {
                "type": "null"
              }
            ]
          },
          "display_fields": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DisplayFieldsView"
              },
              {
                "type": "null"
              }
            ]
          },
          "flag": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          },
          "owner": {
            "$ref": "#/components/schemas/rooch_types::address::RoochAddress"
          },
          "owner_bitcoin_address": {
            "type": [
              "string",
              "null"
            ]
          },
          "size": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "state_root": {
            "$ref": "#/components/schemas/primitive_types::H256"
          },
          "updated_at": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "value": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          }
        }
      },
      "OpView_for_StateView": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "type",
              "value",
              "value_type"
            ],
            "properties": {
              "decoded_value": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AnnotatedMoveValueView"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "display_fields": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/DisplayFieldsView"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "new"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
              },
              "value_type": {
                "$ref": "#/components/schemas/move_core_types::language_storage::TypeTag"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type",
              "value",
              "value_type"
            ],
            "properties": {
              "decoded_value": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AnnotatedMoveValueView"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "display_fields": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/DisplayFieldsView"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "type": {
                "type": "string",
                "enum": [
                  "modify"
                ]
              },
              "value": {
                "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
              },
              "value_type": {
                "$ref": "#/components/schemas/move_core_types::language_storage::TypeTag"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "type"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "delete"
                ]
              }
            }
          }
        ]
      },
      "PageView_for_BalanceInfoView_and_IndexerStateID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "has_next_page"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BalanceInfoView"
            }
          },
          "has_next_page": {
            "type": "boolean"
          },
          "next_cursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IndexerStateID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "PageView_for_EventView_and_uint64": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "has_next_page"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventView"
            }
          },
          "has_next_page": {
            "type": "boolean"
          },
          "next_cursor": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "PageView_for_IndexerEventView_and_IndexerEventID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "has_next_page"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndexerEventView"
            }
          },
          "has_next_page": {
            "type": "boolean"
          },
          "next_cursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IndexerEventID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "PageView_for_IndexerObjectStateView_and_IndexerStateID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "has_next_page"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndexerObjectStateView"
            }
          },
          "has_next_page": {
            "type": "boolean"
          },
          "next_cursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IndexerStateID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "PageView_for_InscriptionStateView_and_IndexerStateID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "has_next_page"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InscriptionStateView"
            }
          },
          "has_next_page": {
            "type": "boolean"
          },
          "next_cursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IndexerStateID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "PageView_for_StateKVView_and_String": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "has_next_page"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StateKVView"
            }
          },
          "has_next_page": {
            "type": "boolean"
          },
          "next_cursor": {
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      "PageView_for_TransactionWithInfoView_and_uint64": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "has_next_page"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionWithInfoView"
            }
          },
          "has_next_page": {
            "type": "boolean"
          },
          "next_cursor": {
            "type": [
              "integer",
              "null"
            ],
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "PageView_for_UTXOStateView_and_IndexerStateID": {
        "description": "`next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first item.",
        "type": "object",
        "required": [
          "data",
          "has_next_page"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UTXOStateView"
            }
          },
          "has_next_page": {
            "type": "boolean"
          },
          "next_cursor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/IndexerStateID"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "QueryOptions": {
        "type": "object",
        "properties": {
          "decode": {
            "description": "If true, the state is decoded and the decoded value is returned in the response.",
            "default": false,
            "type": "boolean"
          },
          "descending": {
            "description": "If true, return query items in descending order.",
            "default": true,
            "type": "boolean"
          },
          "showDisplay": {
            "description": "If true, result with display rendered is returned",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "ScriptCallView": {
        "type": "object",
        "required": [
          "args",
          "code",
          "ty_args"
        ],
        "properties": {
          "args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
            }
          },
          "code": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          },
          "ty_args": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/move_core_types::language_storage::TypeTag"
            }
          }
        }
      },
      "SpecificStructView": {
        "description": "Some specific struct that we want to display in a special way for better readability",
        "anyOf": [
          {
            "$ref": "#/components/schemas/MoveString"
          },
          {
            "$ref": "#/components/schemas/MoveAsciiString"
          },
          {
            "$ref": "#/components/schemas/ObjectID"
          }
        ]
      },
      "StateChangeSetView": {
        "type": "object",
        "required": [
          "changes",
          "global_size"
        ],
        "properties": {
          "changes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ObjectChangeView"
            }
          },
          "global_size": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "StateKVView": {
        "type": "object",
        "required": [
          "key_hex",
          "state"
        ],
        "properties": {
          "key_hex": {
            "$ref": "#/components/schemas/KeyStateHexView"
          },
          "state": {
            "$ref": "#/components/schemas/StateView"
          }
        }
      },
      "StateOptions": {
        "type": "object",
        "properties": {
          "decode": {
            "description": "If true, the state is decoded and the decoded value is returned in the response.",
            "default": false,
            "type": "boolean"
          },
          "showDisplay": {
            "description": "If true, result with display rendered is returned",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "StateView": {
        "type": "object",
        "required": [
          "value",
          "value_type"
        ],
        "properties": {
          "decoded_value": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/AnnotatedMoveValueView"
              },
              {
                "type": "null"
              }
            ]
          },
          "display_fields": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/DisplayFieldsView"
              },
              {
                "type": "null"
              }
            ]
          },
          "value": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          },
          "value_type": {
            "$ref": "#/components/schemas/move_core_types::language_storage::TypeTag"
          }
        }
      },
      "TransactionExecutionInfoView": {
        "type": "object",
        "required": [
          "event_root",
          "gas_used",
          "state_root",
          "status",
          "tx_hash"
        ],
        "properties": {
          "event_root": {
            "$ref": "#/components/schemas/primitive_types::H256"
          },
          "gas_used": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "state_root": {
            "$ref": "#/components/schemas/primitive_types::H256"
          },
          "status": {
            "$ref": "#/components/schemas/KeptVMStatusView"
          },
          "tx_hash": {
            "$ref": "#/components/schemas/primitive_types::H256"
          }
        }
      },
      "TransactionFilterView": {
        "oneOf": [
          {
            "description": "Query by sender address.",
            "type": "object",
            "required": [
              "sender"
            ],
            "properties": {
              "sender": {
                "$ref": "#/components/schemas/rooch_rpc_api::jsonrpc_types::address::RoochOrBitcoinAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by multi chain original address.",
            "type": "object",
            "required": [
              "original_address"
            ],
            "properties": {
              "original_address": {
                "type": "string"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by the given transaction hash.",
            "type": "object",
            "required": [
              "tx_hashes"
            ],
            "properties": {
              "tx_hashes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/primitive_types::H256"
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return transactions in [start_time, end_time) interval",
            "type": "object",
            "required": [
              "time_range"
            ],
            "properties": {
              "time_range": {
                "type": "object",
                "required": [
                  "end_time",
                  "start_time"
                ],
                "properties": {
                  "end_time": {
                    "description": "right endpoint of time interval, milliseconds since block, exclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "start_time": {
                    "description": "left endpoint of time interval, milliseconds since block, inclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Return events emitted in [from_order, to_order) interval",
            "type": "object",
            "required": [
              "tx_order_range"
            ],
            "properties": {
              "tx_order_range": {
                "type": "object",
                "required": [
                  "from_order",
                  "to_order"
                ],
                "properties": {
                  "from_order": {
                    "description": "left endpoint of transaction order, inclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  },
                  "to_order": {
                    "description": "right endpoint of transaction order, exclusive",
                    "type": "integer",
                    "format": "uint64",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransactionOutputView": {
        "type": "object",
        "required": [
          "changeset",
          "events",
          "gas_used",
          "is_upgrade",
          "status"
        ],
        "properties": {
          "changeset": {
            "$ref": "#/components/schemas/StateChangeSetView"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventView"
            }
          },
          "gas_used": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "is_upgrade": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/KeptVMStatusView"
          }
        }
      },
      "TransactionSequenceInfoView": {
        "type": "object",
        "required": [
          "tx_accumulator_root",
          "tx_order",
          "tx_order_signature",
          "tx_timestamp"
        ],
        "properties": {
          "tx_accumulator_root": {
            "$ref": "#/components/schemas/primitive_types::H256"
          },
          "tx_order": {
            "$ref": "#/components/schemas/u64"
          },
          "tx_order_signature": {
            "$ref": "#/components/schemas/alloc::vec::Vec<u8>"
          },
          "tx_timestamp": {
            "$ref": "#/components/schemas/u64"
          }
        }
      },
      "TransactionWithInfoView": {
        "type": "object",
        "required": [
          "execution_info",
          "transaction"
        ],
        "properties": {
          "execution_info": {
            "$ref": "#/components/schemas/TransactionExecutionInfoView"
          },
          "transaction": {
            "$ref": "#/components/schemas/LedgerTransactionView"
          }
        }
      },
      "TxOptions": {
        "type": "object",
        "properties": {
          "withOutput": {
            "description": "If true, the TransactionOutput is returned in the response.",
            "default": false,
            "type": "boolean"
          }
        }
      },
      "UTXOFilterView": {
        "oneOf": [
          {
            "description": "Query by owner, represent by bitcoin address",
            "type": "object",
            "required": [
              "owner"
            ],
            "properties": {
              "owner": {
                "$ref": "#/components/schemas/rooch_types::address::BitcoinAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by bitcoin outpoint, represent by bitcoin txid and vout",
            "type": "object",
            "required": [
              "out_point"
            ],
            "properties": {
              "out_point": {
                "type": "object",
                "required": [
                  "txid",
                  "vout"
                ],
                "properties": {
                  "txid": {
                    "type": "string"
                  },
                  "vout": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query by object id.",
            "type": "object",
            "required": [
              "object_id"
            ],
            "properties": {
              "object_id": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Query all.",
            "type": "string",
            "enum": [
              "all"
            ]
          }
        ]
      },
      "UTXOStateView": {
        "type": "object",
        "required": [
          "created_at",
          "flag",
          "object_id",
          "object_type",
          "owner",
          "state_index",
          "tx_order",
          "updated_at"
        ],
        "properties": {
          "created_at": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "flag": {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          "object_id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "object_type": {
            "$ref": "#/components/schemas/move_core_types::language_storage::StructTag"
          },
          "owner": {
            "$ref": "#/components/schemas/rooch_types::address::RoochAddress"
          },
          "owner_bitcoin_address": {
            "type": [
              "string",
              "null"
            ]
          },
          "state_index": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "tx_order": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "updated_at": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "value": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/UTXOView"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      "UTXOView": {
        "type": "object",
        "required": [
          "bitcoin_txid",
          "seals",
          "txid",
          "value",
          "vout"
        ],
        "properties": {
          "bitcoin_txid": {
            "description": "The txid of the UTXO",
            "allOf": [
              {
                "$ref": "#/components/schemas/bitcoin::hash_types::newtypes::Txid"
              }
            ]
          },
          "seals": {
            "description": "Protocol seals",
            "type": "string"
          },
          "txid": {
            "description": "The txid of the UTXO",
            "allOf": [
              {
                "$ref": "#/components/schemas/primitive_types::H256"
              }
            ]
          },
          "value": {
            "description": "The value of the UTXO",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "vout": {
            "description": "The vout of the UTXO",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        }
      },
      "VMStatusView": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Executed"
            ]
          },
          {
            "type": "object",
            "required": [
              "MoveAbort"
            ],
            "properties": {
              "MoveAbort": {
                "type": "object",
                "required": [
                  "abort_code",
                  "location"
                ],
                "properties": {
                  "abort_code": {
                    "$ref": "#/components/schemas/u64"
                  },
                  "location": {
                    "$ref": "#/components/schemas/move_core_types::vm_status::AbortLocation"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ExecutionFailure"
            ],
            "properties": {
              "ExecutionFailure": {
                "type": "object",
                "required": [
                  "code_offset",
                  "function",
                  "location",
                  "status_code"
                ],
                "properties": {
                  "code_offset": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0.0
                  },
                  "function": {
                    "type": "integer",
                    "format": "uint16",
                    "minimum": 0.0
                  },
                  "location": {
                    "$ref": "#/components/schemas/move_core_types::vm_status::AbortLocation"
                  },
                  "status_code": {
                    "$ref": "#/components/schemas/u64"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Error"
            ],
            "properties": {
              "Error": {
                "$ref": "#/components/schemas/u64"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "alloc::vec::Vec<moveos_types::moveos_std::object::ObjectID>": {
        "type": "string"
      },
      "alloc::vec::Vec<u8>": {
        "type": "string"
      },
      "bitcoin::hash_types::newtypes::Txid": {
        "type": "string"
      },
      "move_core_types::account_address::AccountAddress": {
        "type": "string"
      },
      "move_core_types::language_storage::StructTag": {
        "type": "string"
      },
      "move_core_types::language_storage::TypeTag": {
        "type": "string"
      },
      "move_core_types::u256::U256": {
        "type": "string"
      },
      "move_core_types::vm_status::AbortLocation": {
        "type": "string"
      },
      "moveos_types::access_path::AccessPath": {
        "type": "string"
      },
      "moveos_types::move_std::string::MoveString": {
        "type": "string"
      },
      "moveos_types::move_types::FunctionId": {
        "type": "string"
      },
      "primitive_types::H256": {
        "type": "string"
      },
      "rooch_rpc_api::jsonrpc_types::address::RoochOrBitcoinAddress": {
        "type": "string"
      },
      "rooch_types::address::BitcoinAddress": {
        "type": "string"
      },
      "rooch_types::address::RoochAddress": {
        "type": "string"
      },
      "u128": {
        "type": "string"
      },
      "u64": {
        "type": "string"
      },
      "usize": {
        "type": "string"
      }
    }
  }
}
