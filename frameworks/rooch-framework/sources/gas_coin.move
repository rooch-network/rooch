// Copyright (c) RoochNetwork
// SPDX-License-Identifier: Apache-2.0

/// This module defines Rooch Gas Coin.
module rooch_framework::gas_coin {
    use std::option;
    use std::string;
    use moveos_std::signer;
    use moveos_std::object::{Self, Object};
    use rooch_framework::coin::{Self, Coin, CoinInfo};
    use rooch_framework::account_coin_store;
    use rooch_framework::onchain_config;
    use rooch_framework::chain_id;

    friend rooch_framework::genesis;
    friend rooch_framework::transaction_validator;

    /// RGas is the symbol of Rooch Gas Coin
    //If not, we can remove `store` ability from RGas.
    struct RGas has key, store {}

    const DECIMALS: u8 = 8;
    public fun decimals() : u8 {
        DECIMALS
    }

    public fun balance(addr: address): u256 {
        account_coin_store::balance<RGas>(addr)
    }

    fun borrow_mut_coin_info() : &mut Object<CoinInfo<RGas>> {
        let signer = signer::module_signer<RGas>();
        let coin_info_id = coin::coin_info_id<RGas>();
        object::borrow_mut_object<CoinInfo<RGas>>(&signer, coin_info_id)
    }

    fun mint(amount: u256): Coin<RGas> {
        let coin_info = borrow_mut_coin_info();
        coin::mint_extend<RGas>(coin_info, amount)
    }

    #[test_only]
    public fun mint_for_test(amount: u256) : Coin<RGas> {
        mint(amount)
    }

    public fun burn(coin: Coin<RGas>) {
        let coin_info = borrow_mut_coin_info(); 
        coin::burn_extend<RGas>(coin_info, coin);
    }

    /// deduct gas coin from the given account.
    public(friend) fun deduct_gas(addr: address, amount: u256):Coin<RGas> {
        account_coin_store::withdraw_extend<RGas>(addr, amount)
    }

    /// Mint gas coin to the given account.
    public(friend) fun faucet(addr: address, amount: u256) {
        let coin = mint(amount);
        account_coin_store::deposit_extend<RGas>(addr, coin);
    }

    #[test_only]
    public fun faucet_for_test(addr: address, amount: u256) {
        faucet(addr, amount);
    }

    /// Entry point for the faucet, anyone can get Gas via this function on local/dev net, otherwise only sequencer account can call this function.
    public entry fun faucet_entry(account: &signer, amount: u256) {
        if(!chain_id::is_local_or_dev()){
            onchain_config::ensure_sequencer(account);
        };
        let addr = signer::address_of(account); 
        faucet(addr, amount);
    }

    /// Can only be called during genesis to initialize the Rooch coin.
    public(friend) fun genesis_init(_genesis_account: &signer){
        let rgas_image = x"3c3f786d6c2076657273696f6e3d22312e302220656e636f64696e673d225554462d38223f3e0a3c7376672069643d22757569642d66336331306461332d393431372d343130652d613361622d3863653161623764373561322220646174612d6e616d653d22e59bbee5b18220312220786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f737667222076696577426f783d223020302035303020353030223e0a20203c646566733e0a202020203c7374796c653e0a2020202020202e757569642d66386564316139312d643737302d343465342d623961312d383839386165643739653233207b0a202020202020202066696c6c3a20233030363834303b0a2020202020207d0a0a2020202020202e757569642d30366532646562662d306165662d343934642d623537372d366434393631316531636638207b0a202020202020202066696c6c3a20236232666630343b0a2020202020207d0a202020203c2f7374796c653e0a20203c2f646566733e0a20203c636972636c6520636c6173733d22757569642d30366532646562662d306165662d343934642d623537372d366434393631316531636638222063783d22323530222063793d223235302220723d22323530222f3e0a20203c7061746820636c6173733d22757569642d66386564316139312d643737302d343465342d623961312d3838393861656437396532332220643d224d3334362e33392c3430332e3135632d32362e31372d32332e31382d35312e35382d34352e36392d37372e37332d36382e38362d2e31332c322e35382d2e32382c342e31382d2e32392c352e37372d2e31392c33302e32342d2e33362c36302e34382d2e35342c39302e3733712d2e30342c362e34382d362e37342c362e3435632d382e37382d2e30352d31372e35372d2e32372d32362e33352d2e30372d332e34362c2e30382d342e33362d2e38332d342e33322d342e332c2e33332d33312e36322c2e34362d36332e32332c2e36342d39342e38352c302d312e30352c2e30312d322e30392c2e30322d342e31322d32362e34362c32322e39392d35322e32392c34352e34342d37382e30362c36372e38342d312e362d2e37322d2e39362d312e39352d2e39362d322e38382c2e30342d31342e39372c2e322d32392e39342c2e31372d34342e392c302d322e33362c2e37352d332e38362c322e35322d352e34322c32382e39392d32352e35372c35372e39312d35312e32322c38362e38352d37362e38342c2e36372d2e35392c312e34352d312e30372c322e342d312e37362d312e38392d312e36362d332e36342d312e30392d352e31382d312e312d32372e31322d2e322d35342e32342d2e34332d38312e33362d2e34312d332e39312c302d342e38382d312e30352d342e37342d342e38332c2e33342d392e34362c2e34322d31382e39342c2e31362d32382e342d2e31312d332e38332c312e32392d342e33392c342e36382d342e33352c32362e39362c2e32382c35332e39332c2e33382c38302e392c2e35342c312e36382c302c332e33372c2e30322c352e38332c2e30332d322e30382d332e35392d352e30362d352e352d372e35332d372e37342d32372d32342e35362d35342e30362d34392e30352d38312e31372d37332e34392d312e34392d312e33352d322e31352d322e36342d322e31332d342e36362c2e31372d31362e30332c2e32332d33322e30372c2e33332d34392e32342c32362e32342c32332e33342c35312e38362c34362e31322c37382e32372c36392e36312c2e30312d322e34362c2e30322d342e30362c2e30332d352e36352c2e31382d33312e30312c2e34332d36322e30312c2e34352d39332e30322c302d332e37312c312e312d342e35352c342e36352d342e34342c392e33392c2e32392c31382e382c2e34322c32382e31392c2e31342c342e30362d2e31322c342e36392c312e32382c342e36352c342e39332d2e33332c33302e372d2e34342c36312e342d2e36322c39322e312c302c312e36332d2e30322c332e32372d2e30342c362e31392c32362e35322d32332e31332c35322e31362d34352e352c37372e39382d36382e30312c312e30342c312e362c2e36342c322e39392c2e36342c342e32372d2e30352c31332e392d2e32392c32372e382d2e31332c34312e372c2e30352c332e38362d312e31342c362e34312d342e30352c382e39372d32382e33312c32342e39352d35362e34382c35302e30352d38342e36392c37352e312d2e37382c2e36392d312e35322c312e34312d322e34352c322e32372c312e36362c312e37312c332e362c312e30332c352e32372c312e30342c32362e39362c2e32312c35332e39332c2e34312c38302e392c2e34342c332e34322c302c342e37372c2e362c342e36322c342e34312d2e33372c392e36312d2e33372c31392e32342d2e31392c32382e38362c2e30362c332e33382d2e37372c342e33352d342e33312c342e33312d32372e31322d2e33322d35342e32342d2e342d38312e33362d2e35362d312e36342c302d332e32382d2e30322d362e31342d2e30342c382e37372c372e39342c31362e36342c31352e30392c32342e35342c32322e32322c32312e36332c31392e35322c34332e32362c33392e30342c36342e39312c35382e35332c312e30382c2e39372c312e38312c312e38392c312e382c332e34362d2e31342c31362e33322d2e32322c33322e36342d2e33322c35302e30355a222f3e0a3c2f7376673e";
        let coin_info_obj = coin::register_extend<RGas>(
            string::utf8(b"Rooch Gas Coin"),
            string::utf8(b"RGAS"),
            option::some(string::utf8(rgas_image)),
            DECIMALS, // decimals
        );
        object::transfer(coin_info_obj, @rooch_framework);
    }
}
