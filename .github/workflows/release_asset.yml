name: Release asset bot

on:
  workflow_dispatch:
  release:
    types: [published]
jobs:
  build:
    name: Build release asset
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ubuntu-latest
          - ubuntu-22.04
          - macos-latest
          - windows-2022
    runs-on: ${{matrix.platform}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Install LLVM and Clang # required for bindgen to work, see https://github.com/rust-lang/rust-bindgen/issues/1797
        uses: KyleMayes/install-llvm-action@v1
        if: matrix.platform == 'windows-latest'
        with:
          version: "11.0"
          directory: ${{ runner.temp }}/llvm
      - name: Set LIBCLANG_PATH
        run: echo "LIBCLANG_PATH=$((gcm clang).source -replace "clang.exe")" >> $env:GITHUB_ENV
        if: matrix.platform == 'windows-latest'
      - name: Install LLVM and Clang
        uses: egor-tensin/setup-clang@v1
        if: matrix.platform != 'windows-latest' && matrix.platform != 'macos-latest'
        with:
          platform: x64

      #fix https://github.com/rooch-network/rooch/issues/1157  with https://github.com/diesel-rs/diesel/blob/master/.github/workflows/ci.yml
      - name: Install sqlite (Windows)
        if: matrix.platform == 'windows-2022'
        shell: cmd
        run: |
          choco install sqlite
          cd /D C:\ProgramData\chocolatey\lib\SQLite\tools
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          lib /machine:x64 /def:sqlite3.def /out:sqlite3.lib

      - name: Set variables for sqlite (Windows)
        if: matrix.platform == 'windows-2022'
        shell: bash
        run: |
          echo "C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_PATH
          echo "SQLITE3_LIB_DIR=C:\ProgramData\chocolatey\lib\SQLite\tools" >> $GITHUB_ENV

      - name: Install Protoc
        uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{secrets.GITHUB_TOKEN}}

      - name: build for ${{ matrix.platform }}
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release

      - name: build rooch release asset
        run: bash ./scripts/release.sh ${{ matrix.platform }}

      - name: upload artifact asset
        uses: actions/upload-artifact@v2
        if: ${{ github.event_name != 'release'}}
        with:
          name: rooch-${{ matrix.platform }}.zip
          path: ./rooch-${{ matrix.platform }}.zip

      - name: upload rooch release asset
        if: ${{ github.event_name == 'release'}}
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./rooch-${{ matrix.platform }}.zip
          asset_name: rooch-${{ matrix.platform }}.zip
          asset_content_type: application/zip
