module rooch_examples::publish {
    use std::vector;
    use std::signer;
    use moveos_std::move_module::{Self, MoveModule};
    use moveos_std::storage_context::StorageContext;
    use moveos_std::account_storage;

    #[test_only]
    use moveos_std::storage_context;
    #[test_only]
    use std::debug;

    public entry fun publish_modules_entry(ctx: &mut StorageContext,  account: &signer) {
        account_storage::ensure_account_storage(ctx, signer::address_of(account));
        // The following is the bytes and hex of the compiled module: example/counter/sources/counter.move
        // let module_bytes = [161, 28, 235, 11, 6, 0, 0, 0, 11, 1, 0, 6, 2, 6, 8, 3, 14, 38, 4, 52, 6, 5, 58, 50, 7, 108, 140, 1, 8, 248, 1, 64, 6, 184, 2, 34, 10, 218, 2, 5, 12, 223, 2, 86, 13, 181, 3, 2, 0, 0, 1, 1, 1, 2, 0, 3, 12, 0, 2, 4, 0, 0, 0, 5, 0, 1, 0, 0, 6, 0, 1, 0, 0, 7, 2, 1, 0, 0, 8, 3, 4, 0, 1, 9, 7, 8, 1, 8, 1, 10, 9, 1, 1, 8, 1, 11, 10, 11, 1, 8, 4, 6, 5, 6, 6, 6, 1, 7, 8, 1, 0, 2, 7, 8, 1, 6, 12, 1, 6, 8, 1, 1, 3, 1, 7, 8, 0, 1, 8, 0, 2, 7, 8, 1, 5, 1, 7, 9, 0, 3, 7, 8, 1, 6, 12, 9, 0, 2, 6, 8, 1, 5, 1, 6, 9, 0, 7, 99, 111, 117, 110, 116, 101, 114, 15, 97, 99, 99, 111, 117, 110, 116, 95, 115, 116, 111, 114, 97, 103, 101, 15, 115, 116, 111, 114, 97, 103, 101, 95, 99, 111, 110, 116, 101, 120, 116, 7, 67, 111, 117, 110, 116, 101, 114, 14, 83, 116, 111, 114, 97, 103, 101, 67, 111, 110, 116, 101, 120, 116, 8, 105, 110, 99, 114, 101, 97, 115, 101, 9, 105, 110, 99, 114, 101, 97, 115, 101, 95, 4, 105, 110, 105, 116, 5, 118, 97, 108, 117, 101, 17, 103, 108, 111, 98, 97, 108, 95, 98, 111, 114, 114, 111, 119, 95, 109, 117, 116, 14, 103, 108, 111, 98, 97, 108, 95, 109, 111, 118, 101, 95, 116, 111, 13, 103, 108, 111, 98, 97, 108, 95, 98, 111, 114, 114, 111, 119, 206, 12, 70, 216, 239, 66, 116, 66, 214, 195, 176, 91, 204, 79, 246, 211, 50, 144, 248, 211, 239, 138, 189, 249, 110, 52, 68, 102, 183, 48, 58, 157, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 32, 206, 12, 70, 216, 239, 66, 116, 66, 214, 195, 176, 91, 204, 79, 246, 211, 50, 144, 248, 211, 239, 138, 189, 249, 110, 52, 68, 102, 183, 48, 58, 157, 0, 2, 1, 8, 3, 0, 1, 4, 0, 1, 3, 11, 0, 17, 1, 2, 1, 1, 0, 0, 5, 13, 11, 0, 7, 0, 56, 0, 12, 1, 10, 1, 16, 0, 20, 6, 1, 0, 0, 0, 0, 0, 0, 0, 22, 11, 1, 15, 0, 21, 2, 2, 0, 0, 0, 1, 6, 11, 0, 11, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, 18, 0, 56, 1, 2, 3, 1, 0, 0, 1, 6, 11, 0, 7, 0, 56, 2, 16, 0, 20, 2, 0, 0, 0];
        // Fixme: this module is compiled with my local account, so it may failed in other environment 
        //  or with other signers.
        let module_bytes: vector<u8> = x"a11ceb0b060000000b010006020608030e26043406053a32076c8c0108f8014006b802220ada02050cdf02560db5030200000101010200030c00020400000005000100000600010000070201000008030400010907080108010a09010108010b0a0b0108040605060606010708010002070801060c0106080101030107080001080002070801050107090003070801060c090002060801050106090007636f756e7465720f6163636f756e745f73746f726167650f73746f726167655f636f6e7465787407436f756e7465720e53746f72616765436f6e7465787408696e63726561736509696e6372656173655f04696e69740576616c756511676c6f62616c5f626f72726f775f6d75740e676c6f62616c5f6d6f76655f746f0d676c6f62616c5f626f72726f775f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8000000000000000000000000000000000000000000000000000000000000000205205f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c800020108030001040001030b0011010201010000050d0b00070038000c010a01100014060100000000000000160b010f0015020200000001060b000b0106000000000000000012003801020301000001060b000700380210001402000000";
        let m: MoveModule = move_module::new(module_bytes);
        account_storage::publish_modules(ctx, account, vector::singleton(m));
    }

    #[test(account=@0x2341)]
    fun test_get_module_name(account: &signer) {
        let addr = signer::address_of(account);
        let ctx = storage_context::new_test_context(addr);
        // the following module is: rooch_examples::counter
        let module_bytes: vector<u8> = x"a11ceb0b060000000b010006020608030e26043406053a32076c8c0108f8014006b802220ada02050cdf02560db5030200000101010200030c00020400000005000100000600010000070201000008030400010907080108010a09010108010b0a0b0108040605060606010708010002070801060c0106080101030107080001080002070801050107090003070801060c090002060801050106090007636f756e7465720f6163636f756e745f73746f726167650f73746f726167655f636f6e7465787407436f756e7465720e53746f72616765436f6e7465787408696e63726561736509696e6372656173655f04696e69740576616c756511676c6f62616c5f626f72726f775f6d75740e676c6f62616c5f6d6f76655f746f0d676c6f62616c5f626f72726f77ce0c46d8ef427442d6c3b05bcc4ff6d33290f8d3ef8abdf96e344466b7303a9d00000000000000000000000000000000000000000000000000000000000000020520ce0c46d8ef427442d6c3b05bcc4ff6d33290f8d3ef8abdf96e344466b7303a9d00020108030001040001030b0011010201010000050d0b00070038000c010a01100014060100000000000000160b010f0015020200000001060b000b0106000000000000000012003801020301000001060b000700380210001402000000";
        let m: MoveModule = move_module::new(module_bytes);
        let name = move_module::module_name(&m);
        debug::print(&name);
        storage_context::drop_test_context(ctx);
    }

    #[test(account=@0x2341)]
    fun test_verify_modules(account: &signer) {
        let addr = signer::address_of(account);
        let ctx = storage_context::new_test_context(addr);
        // the following module is: rooch_examples::counter
        let module_bytes: vector<u8> = x"a11ceb0b060000000b010006020608030e26043406053a32076c8c0108f8014006b802220ada02050cdf02560db5030200000101010200030c00020400000005000100000600010000070201000008030400010907080108010a09010108010b0a0b0108040605060606010708010002070801060c0106080101030107080001080002070801050107090003070801060c090002060801050106090007636f756e7465720f6163636f756e745f73746f726167650f73746f726167655f636f6e7465787407436f756e7465720e53746f72616765436f6e7465787408696e63726561736509696e6372656173655f04696e69740576616c756511676c6f62616c5f626f72726f775f6d75740e676c6f62616c5f6d6f76655f746f0d676c6f62616c5f626f72726f77ce0c46d8ef427442d6c3b05bcc4ff6d33290f8d3ef8abdf96e344466b7303a9d00000000000000000000000000000000000000000000000000000000000000020520ce0c46d8ef427442d6c3b05bcc4ff6d33290f8d3ef8abdf96e344466b7303a9d00020108030001040001030b0011010201010000050d0b00070038000c010a01100014060100000000000000160b010f0015020200000001060b000b0106000000000000000012003801020301000001060b000700380210001402000000";
        let m: MoveModule = move_module::new(module_bytes);
        let modules = vector::singleton(m);
        let module_names = move_module::verify_modules(&modules, addr);
        debug::print(&module_names);
        storage_context::drop_test_context(ctx);  
    }

    #[test(account=@0x2341)]
    fun test_publish_modules(account: &signer) {
        let addr = signer::address_of(account);
        let ctx = storage_context::new_test_context(addr);
        account_storage::create_account_storage(&mut ctx, addr);
        // The following is the bytes and hex of the compiled module: example/counter/sources/counter.move
        // Fixme: this module is compiled with my local account, so it may failed in other environment 
        //  or with other signers.
        
        let module_bytes: vector<u8> = x"a11ceb0b060000000b010006020608030e26043406053a32076c8c0108f8014006b802220ada02050cdf02560db5030200000101010200030c00020400000005000100000600010000070201000008030400010907080108010a09010108010b0a0b0108040605060606010708010002070801060c0106080101030107080001080002070801050107090003070801060c090002060801050106090007636f756e7465720f6163636f756e745f73746f726167650f73746f726167655f636f6e7465787407436f756e7465720e53746f72616765436f6e7465787408696e63726561736509696e6372656173655f04696e69740576616c756511676c6f62616c5f626f72726f775f6d75740e676c6f62616c5f6d6f76655f746f0d676c6f62616c5f626f72726f775f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8000000000000000000000000000000000000000000000000000000000000000205205f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c800020108030001040001030b0011010201010000050d0b00070038000c010a01100014060100000000000000160b010f0015020200000001060b000b0106000000000000000012003801020301000001060b000700380210001402000000";
        let m: MoveModule = move_module::new(module_bytes);
        account_storage::publish_modules(&mut ctx, account, vector::singleton(m));
        storage_context::drop_test_context(ctx);  
    }
}