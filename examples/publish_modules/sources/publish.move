module rooch_examples::publish {
    use std::vector;
    use std::signer;
    use moveos_std::move_module::{Self, MoveModule};
    use moveos_std::storage_context::StorageContext;
    use moveos_std::account_storage;

    #[test_only]
    use moveos_std::storage_context;
    #[test_only]
    use std::debug;

    public entry fun publish_modules_entry(ctx: &mut StorageContext,  account: &signer, module_bytes: vector<u8>) {
        account_storage::ensure_account_storage(ctx, signer::address_of(account));
        let m: MoveModule = move_module::new(module_bytes);
        account_storage::publish_modules(ctx, account, vector::singleton(m));
    }

    #[test(account=@0x5f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8)]
    fun test_get_module_name(account: &signer) {
        let addr = signer::address_of(account);
        let ctx = storage_context::new_test_context(addr);
        // The following is the bytes and hex of the compiled module: example/counter/sources/counter.move
        // with account 0x5f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8
        let module_bytes: vector<u8> = x"a11ceb0b060000000b010006020608030e26043406053a32076c8c0108f8014006b802220ada02050cdf02560db5030200000101010200030c00020400000005000100000600010000070201000008030400010907080108010a09010108010b0a0b0108040605060606010708010002070801060c0106080101030107080001080002070801050107090003070801060c090002060801050106090007636f756e7465720f6163636f756e745f73746f726167650f73746f726167655f636f6e7465787407436f756e7465720e53746f72616765436f6e7465787408696e63726561736509696e6372656173655f04696e69740576616c756511676c6f62616c5f626f72726f775f6d75740e676c6f62616c5f6d6f76655f746f0d676c6f62616c5f626f72726f775f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8000000000000000000000000000000000000000000000000000000000000000205205f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c800020108030001040001030b0011010201010000050d0b00070038000c010a01100014060100000000000000160b010f0015020200000001060b000b0106000000000000000012003801020301000001060b000700380210001402000000";
        let m: MoveModule = move_module::new(module_bytes);
        let name = move_module::module_name(&m);
        debug::print(&name);
        storage_context::drop_test_context(ctx);
    }

    #[test(account=@0x5f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8)]
    fun test_verify_modules(account: &signer) {
        let addr = signer::address_of(account);
        let ctx = storage_context::new_test_context(addr);
        // The following is the bytes and hex of the compiled module: example/counter/sources/counter.move
        // with account 0x5f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8
        let module_bytes: vector<u8> = x"a11ceb0b060000000b010006020608030e26043406053a32076c8c0108f8014006b802220ada02050cdf02560db5030200000101010200030c00020400000005000100000600010000070201000008030400010907080108010a09010108010b0a0b0108040605060606010708010002070801060c0106080101030107080001080002070801050107090003070801060c090002060801050106090007636f756e7465720f6163636f756e745f73746f726167650f73746f726167655f636f6e7465787407436f756e7465720e53746f72616765436f6e7465787408696e63726561736509696e6372656173655f04696e69740576616c756511676c6f62616c5f626f72726f775f6d75740e676c6f62616c5f6d6f76655f746f0d676c6f62616c5f626f72726f775f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8000000000000000000000000000000000000000000000000000000000000000205205f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c800020108030001040001030b0011010201010000050d0b00070038000c010a01100014060100000000000000160b010f0015020200000001060b000b0106000000000000000012003801020301000001060b000700380210001402000000";
        let m: MoveModule = move_module::new(module_bytes);
        let modules = vector::singleton(m);
        let (module_names, _module_names_with_init_fn) = move_module::verify_modules(&modules, addr);
        debug::print(&module_names);
        storage_context::drop_test_context(ctx);  
    }

    #[test(account=@0x5f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8)]
    fun test_publish_modules(account: &signer) {
        let addr = signer::address_of(account);
        let ctx = storage_context::new_test_context(addr);
        account_storage::create_account_storage(&mut ctx, addr);
        // The following is the bytes and hex of the compiled module: example/counter/sources/counter.move
        // with account 0x5f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8       
        let module_bytes: vector<u8> = x"a11ceb0b060000000b010006020608030e26043406053a32076c8c0108f8014006b802220ada02050cdf02560db5030200000101010200030c00020400000005000100000600010000070201000008030400010907080108010a09010108010b0a0b0108040605060606010708010002070801060c0106080101030107080001080002070801050107090003070801060c090002060801050106090007636f756e7465720f6163636f756e745f73746f726167650f73746f726167655f636f6e7465787407436f756e7465720e53746f72616765436f6e7465787408696e63726561736509696e6372656173655f04696e69740576616c756511676c6f62616c5f626f72726f775f6d75740e676c6f62616c5f6d6f76655f746f0d676c6f62616c5f626f72726f775f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c8000000000000000000000000000000000000000000000000000000000000000205205f5c82f7895b07f2cb8751b2001fb7e80f94845f9915bbd56e112af0f68148c800020108030001040001030b0011010201010000050d0b00070038000c010a01100014060100000000000000160b010f0015020200000001060b000b0106000000000000000012003801020301000001060b000700380210001402000000";
        let m: MoveModule = move_module::new(module_bytes);
        account_storage::publish_modules(&mut ctx, account, vector::singleton(m));
        storage_context::drop_test_context(ctx);  
    }
}