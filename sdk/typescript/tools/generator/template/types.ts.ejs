<% Object.entries(schemas).forEach(([originalName, schema]) => { %>
    <% if (originalName === 'alloc::vec::Vec<u8>') return; %>
    <% let name = originalName; %>
    <% if (originalName.indexOf('::') !== -1) { %>
    <%   name = originalName.replace(/::/g, "_").replace(/<u8>/g, "_U8Array"); %>
    <% } %>

    <% if (schema.description) { %>// <%= schema.description %> <% } %>
    <% if (schema.properties) { %>export type <%= alias(name) %> = {<% Object.entries(schema.properties).forEach(([propName, propSpec]) => { %><%= propName %><%= schema.required && schema.required.includes(propName) ? '' : '?' %>: <%= getType(propSpec, schemas, alias) %>; <% }) %>}
    <% } else if (schema.type || schema.anyOf || schema.oneOf) { %>
    <%   if (schema.oneOf) { %>
      <% schema.oneOf.forEach((subSchema, index) => { %>
        <% if (typeof subSchema === 'object' && !(subSchema instanceof Array) && subSchema !== null) { %>export type <%= alias(name) %><%= index %> = <%= getType(subSchema, schemas, alias) %>;
        <% } %>
      <% }) %>
      export type <%= alias(name) %> = <%= schema.oneOf.map((_, index) => `${alias(name)}${index}`).join(' | ') %>;
    <% } else { %>export type <%= alias(name) %> = <%= getType(schema, schemas, alias) %>;<%   } %>
    <% } else { %>// Missing properties and type: <%= originalName %><% } %>
<% }) %>


    
    