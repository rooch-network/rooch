import { RequestManager, Client } from "@open-rpc/client-js";
import { 
<% const allImportTypes = new Array(); %> 
<% allImportTypes.push("boolean", "number", "string", "any", "Array", "Map", "Uint8Array") %> 

<% methods.forEach((method) => { %> 
    <% method.params.forEach((param)=>{ %>
        <% let paramType = getType(param.schema, schemas, alias); %>
        <% if (method.result.schema.type === "array") { %>
        <%    paramType = paramType.split('|')[0].trim().replace("[]", "") %>
        <% } else { %>
        <%    paramType = paramType.split('|')[0].trim() %>
        <% } %>
        <% if (!allImportTypes.includes(paramType)) { %>
        <%   allImportTypes.push(paramType);  %>
        <%= paramType %>,
        <% } %>
    <% }) %>

    <% let resultType = getType(method.result.schema, schemas, alias); %>
    <% if (method.result.schema.type === "array") { %>
    <%    resultType = resultType.split('|')[0].trim().replace("[]", "") %>
    <% } else { %>
    <%    resultType = resultType.split('|')[0].trim() %>
    <% } %>
    <% if (!allImportTypes.includes(resultType)) { %>
    <%   allImportTypes.push(resultType);  %>
    <%= resultType %>,
    <% } %>
<% }) %>
} from "./types";

export class JsonRpcClient extends Client {
    constructor(requestManager: RequestManager) {
        super(requestManager)
    }

    async getRpcApiVersion(): Promise<string | undefined> {
        const resp = await this.request({
            method: "rpc.discover",
            params: [],
        });

        return resp.info.version as string;
    }

    <% methods.forEach((method) => { %> 
    <% if (method.description) { %>// <%= method.description %> <% } %>
    async <%= method.name %>(<%= method.params.map(param=>param.name + ":" + getType(param.schema, schemas, alias)) %>): Promise<<%= getType(method.result.schema, schemas, alias) %>> {
        <% method.params.map(param=>{  %> 
            <% const paramType = getType(param.schema, schemas, alias) %>
            <% if (paramType == 'Uint8Array') { %>
                const <%= param.name + "_hex"%> = <%=param.name%> ? `0x${Array.from(<%=param.name%>)
                .map(byte => byte.toString(16).padStart(2, '0'))
                .join('')}` : null
            <% } %>
        <% }) %>

        const resp = await this.request({
            method: '<%= method.name %>',
            params: [<%= method.params.map(param=>getType(param.schema, schemas, alias)=="Uint8Array" ? param.name + "_hex":param.name) %>],
        });

        return resp as <%= getType(method.result.schema, schemas, alias) %>;
    }
    <% }) %>
}