// Copyright (c) RoochNetwork
// SPDX-License-Identifier: Apache-2.0

/**
 *  ######################################
 *  ### DO NOT EDIT THIS FILE DIRECTLY ###
 *  ######################################
 *
 * This file is generated from:
 * /crates/rooch-open-rpc-spec/openrpc.json
 */

export interface AnnotatedFunctionResultView {
  return_values?: AnnotatedFunctionReturnValueView[] | null
  vm_status: VMStatusView
}
export interface AnnotatedFunctionReturnValueView {
  decoded_value: AnnotatedMoveValueView
  value: FunctionReturnValueView
}
export interface AnnotatedMoveStructView {
  abilities: number
  type: string
  value: {
    [key: string]: AnnotatedMoveValueView
  }
}
export type AnnotatedMoveValueView =
  | number
  | string
  | string
  | boolean
  | string
  | AnnotatedMoveValueView[]
  | string
  | AnnotatedMoveStructView
  | SpecificStructView
  | number
  | number
  | string
export interface BalanceInfoView {
  balance: string
  coin_type: string
  decimals: number
  name: string
  supply: string
  symbol: string
}
export interface DisplayFieldsView {
  fields: {
    [key: string]: string
  }
}
export type EventFilterView =
  /** Query by event type. */
  | {
      event_type: string
    } /** Query by sender address. */
  | {
      sender: string
    } /** Return events emitted by the given transaction hash. */
  | {
      tx_hash: string
    } /** Return events emitted in [start_time, end_time) interval */
  | {
      time_range: {
        /** right endpoint of time interval, milliseconds since block, exclusive */
        end_time: string
        /** left endpoint of time interval, milliseconds since block, inclusive */
        start_time: string
      }
    } /** Return events emitted in [from_order, to_order) interval */
  | {
      tx_order_range: {
        /** left endpoint of transaction order, inclusive */
        from_order: string
        /** right endpoint of transaction order, exclusive */
        to_order: string
      }
    }
export interface EventIDView {
  /** each event handle corresponds to a unique event handle id. event handler id equal to guid. */
  event_handle_id: string
  /** For expansion: The number of messages that have been emitted to the path previously */
  event_seq: string
}
export interface EventOptions {
  /** If true, the event is decoded and the decoded value is returned in the response. */
  decode?: boolean
}
export interface EventView {
  decoded_event_data?: AnnotatedMoveStructView | null
  event_data: string
  event_id: EventIDView
  event_index: string
  event_type: string
}
export interface ExecuteTransactionResponseView {
  execution_info: TransactionExecutionInfoView
  output?: TransactionOutputView | null
  sequence_info: TransactionSequenceInfoView
}
export interface FunctionCallView {
  args: string[]
  function_id: string
  ty_args: string[]
}
export interface FunctionReturnValueView {
  type_tag: string
  value: string
}
export interface IndexerEventIDView {
  event_index: string
  tx_order: string
}
export interface IndexerEventView {
  created_at: string
  decoded_event_data?: AnnotatedMoveStructView | null
  event_data: string
  event_id: EventIDView
  event_type: string
  indexer_event_id: IndexerEventIDView
  sender: string
  tx_hash: string
}
export interface IndexerObjectStateView {
  created_at: string
  decoded_value?: AnnotatedMoveStructView | null
  display_fields?: DisplayFieldsView | null
  flag: number
  id: string
  object_type: string
  owner: string
  owner_bitcoin_address?: string | null
  size: string
  state_index: string
  state_root?: string | null
  tx_order: string
  updated_at: string
  /** bcs bytes of the Object. */
  value: string
}
export interface IndexerStateIDView {
  state_index: string
  tx_order: string
}
export type InscriptionFilterView =
  /** Query by owner, support rooch address and bitcoin address */
  | {
      owner: string
    } /** Query by inscription id, represent by bitcoin txid and index */
  | {
      inscription_id: {
        index: number
        txid: string
      }
    } /** Query by object id. */
  | {
      object_id: string
    }
  | 'all'
export interface InscriptionStateView {
  created_at: string
  flag: number
  id: string
  object_type: string
  owner: string
  owner_bitcoin_address?: string | null
  size: string
  state_index: string
  state_root?: string | null
  tx_order: string
  updated_at: string
  value: InscriptionView
}
export interface InscriptionView {
  bitcoin_txid: string
  body: string
  content_encoding?: string | null
  content_type?: string | null
  index: number
  inscription_number: number
  is_curse: boolean
  metadata: string
  metaprotocol?: string | null
  offset: string
  parents: string
  pointer?: string | null
  sequence_number: number
  txid: string
}
export type KeptVMStatusView =
  | {
      type: 'executed'
    }
  | {
      type: 'outofgas'
    }
  | {
      abort_code: string
      location: string
      type: 'moveabort'
    }
  | {
      code_offset: number
      function: number
      location: string
      type: 'executionfailure'
    }
  | {
      type: 'miscellaneouserror'
    }
export interface LedgerTransactionView {
  data: LedgerTxDataView
  sequence_info: TransactionSequenceInfoView
}
export type LedgerTxDataView =
  | {
      block_hash: string
      block_height: string
      chain_id: string
      type: 'l1_block'
    }
  | {
      bitcoin_block_hash?: string | null
      bitcoin_txid?: string | null
      block_hash: string
      chain_id: string
      txid: string
      type: 'l1_tx'
    }
  | {
      action: MoveActionView
      action_type: MoveActionTypeView
      raw: string
      sender: string
      sender_bitcoin_address?: string | null
      sequence_number: string
      type: 'l2_tx'
    }
/** A Move module ABI */
export interface ModuleABIView {
  address: string
  /** Friends of the module */
  friends: string[]
  /** Public or entry functions of the module */
  functions: MoveFunctionView[]
  name: string
  /** Structs of the module */
  structs: MoveStructView[]
}
export type MoveActionTypeView = 'scriptcall' | 'functioncall' | 'modulebundle'
export interface MoveActionView {
  function_call?: FunctionCallView | null
  module_bundle?: string[] | null
  script_call?: ScriptCallView | null
}
export interface MoveAsciiString {
  bytes: number[]
}
/** Move function generic type param */
export interface MoveFunctionTypeParamView {
  /** Move abilities tied to the generic type param and associated with the function that uses it */
  constraints: string[]
}
/** Move function */
export interface MoveFunctionView {
  /** Whether the function can be called as an entry function directly in a transaction */
  is_entry: boolean
  name: string
  /** Parameters associated with the move function */
  params: string[]
  /** Return type of the function */
  return: string[]
  /** Generic type params associated with the Move function */
  type_params: MoveFunctionTypeParamView[]
}
export interface MoveString {
  bytes: number[]
}
/** Move struct field */
export interface MoveStructFieldView {
  name: string
  type: string
}
/** Move generic type param */
export interface MoveStructTypeParamView {
  /** Move abilities tied to the generic type param and associated with the type that uses it */
  constraints: string[]
  /** Whether the type is a phantom type */
  is_phantom: boolean
}
/** A move struct */
export interface MoveStructView {
  /** Abilities associated with the struct */
  abilities: string[]
  /** Fields associated with the struct */
  fields: MoveStructFieldView[]
  /** Whether the struct is a native struct of Move */
  is_native: boolean
  name: string
  /** Generic types associated with the struct */
  type_params: MoveStructTypeParamView[]
}
export interface ObjectChangeView {
  fields: ObjectChangeView[]
  metadata: ObjectMetaView
  value?: OpView | null
}
export interface ObjectMetaView {
  created_at: string
  flag: number
  id: string
  object_type: string
  owner: string
  owner_bitcoin_address?: string | null
  size: string
  state_root?: string | null
  updated_at: string
}
export type ObjectStateFilterView =
  /** Query by object value type and owner. */
  | {
      object_type_with_owner: {
        object_type: string
        owner: string
      }
    } /** Query by object value type. */
  | {
      object_type: string
    } /** Query by owner. */
  | {
      owner: string
    } /** Query by object ids. */
  | {
      object_id: string
    }
/** Object state view. Used as return type of `getObjectStates`. */
export interface ObjectStateView {
  created_at: string
  decoded_value?: AnnotatedMoveStructView | null
  display_fields?: DisplayFieldsView | null
  flag: number
  id: string
  object_type: string
  owner: string
  owner_bitcoin_address?: string | null
  size: string
  state_root?: string | null
  updated_at: string
  value: string
}
export type OpView =
  | 'delete'
  | {
      new: string
    }
  | {
      modify: string
    }
/**
 * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the
 * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first
 * item.
 */
export interface PaginatedBalanceInfoViews {
  data: BalanceInfoView[]
  has_next_page: boolean
  next_cursor?: IndexerStateIDView | null
}
/**
 * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the
 * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first
 * item.
 */
export interface PaginatedEventViews {
  data: EventView[]
  has_next_page: boolean
  next_cursor?: string | null
}
/**
 * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the
 * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first
 * item.
 */
export interface PaginatedIndexerEventViews {
  data: IndexerEventView[]
  has_next_page: boolean
  next_cursor?: IndexerEventIDView | null
}
/**
 * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the
 * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first
 * item.
 */
export interface PaginatedIndexerObjectStateViews {
  data: IndexerObjectStateView[]
  has_next_page: boolean
  next_cursor?: IndexerStateIDView | null
}
/**
 * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the
 * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first
 * item.
 */
export interface PaginatedInscriptionStateViews {
  data: InscriptionStateView[]
  has_next_page: boolean
  next_cursor?: IndexerStateIDView | null
}
/**
 * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the
 * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first
 * item.
 */
export interface PaginatedStateKVViews {
  data: StateKVView[]
  has_next_page: boolean
  next_cursor?: string | null
}
/**
 * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the
 * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first
 * item.
 */
export interface PaginatedTransactionWithInfoViews {
  data: TransactionWithInfoView[]
  has_next_page: boolean
  next_cursor?: string | null
}
/**
 * `next_cursor` points to the last item in the page; Reading with `next_cursor` will start from the
 * next item after `next_cursor` if `next_cursor` is `Some`, otherwise it will start from the first
 * item.
 */
export interface PaginatedUTXOStateViews {
  data: UTXOStateView[]
  has_next_page: boolean
  next_cursor?: IndexerStateIDView | null
}
export interface QueryOptions {
  /** If true, the state is decoded and the decoded value is returned in the response. */
  decode?: boolean
  /** If true, return query items in descending order. */
  descending?: boolean
  /** If true, result with display rendered is returned */
  showDisplay?: boolean
}
export interface ScriptCallView {
  args: string[]
  code: string
  ty_args: string[]
}
/** Some specific struct that we want to display in a special way for better readability */
export type SpecificStructView = MoveString | MoveAsciiString | string
export interface StateChangeSetView {
  changes: ObjectChangeView[]
  global_size: string
  state_root: string
}
export interface StateKVView {
  field_key: string
  state: ObjectStateView
}
export interface StateOptions {
  /** If true, the state is decoded and the decoded value is returned in the response. */
  decode?: boolean
  /** If true, result with display rendered is returned */
  showDisplay?: boolean
}
export interface TransactionExecutionInfoView {
  event_root: string
  gas_used: string
  state_root: string
  status: KeptVMStatusView
  tx_hash: string
}
export type TransactionFilterView =
  /** Query by sender address. */
  | {
      sender: string
    } /** Query by multi chain original address. */
  | {
      original_address: string
    } /** Query by the given transaction hash. */
  | {
      tx_hashes: string[]
    } /** Return transactions in [start_time, end_time) interval */
  | {
      time_range: {
        /** right endpoint of time interval, milliseconds since block, exclusive */
        end_time: string
        /** left endpoint of time interval, milliseconds since block, inclusive */
        start_time: string
      }
    } /** Return events emitted in [from_order, to_order) interval */
  | {
      tx_order_range: {
        /** left endpoint of transaction order, inclusive */
        from_order: string
        /** right endpoint of transaction order, exclusive */
        to_order: string
      }
    }
export interface TransactionOutputView {
  changeset: StateChangeSetView
  events: EventView[]
  gas_used: string
  is_upgrade: boolean
  status: KeptVMStatusView
}
export interface TransactionSequenceInfoView {
  tx_accumulator_root: string
  tx_order: string
  tx_order_signature: string
  tx_timestamp: string
}
export interface TransactionWithInfoView {
  execution_info?: TransactionExecutionInfoView | null
  transaction: LedgerTransactionView
}
export interface TxOptions {
  /** If true, the TransactionOutput is returned in the response. */
  withOutput?: boolean
}
export type UTXOFilterView =
  /** Query by owner, support rooch address and bitcoin address */
  | {
      owner: string
    } /** Query by bitcoin outpoint, represent by bitcoin txid and vout */
  | {
      out_point: {
        txid: string
        vout: number
      }
    } /** Query by object id. */
  | {
      object_id: string
    }
  | 'all'
export interface UTXOStateView {
  created_at: string
  flag: number
  id: string
  object_type: string
  owner: string
  owner_bitcoin_address?: string | null
  size: string
  state_index: string
  state_root?: string | null
  tx_order: string
  updated_at: string
  value: UTXOView
}
export interface UTXOView {
  /** The txid of the UTXO */
  bitcoin_txid: string
  /** Protocol seals */
  seals: string
  /** The txid of the UTXO */
  txid: string
  /** The value of the UTXO */
  value: string
  /** The vout of the UTXO */
  vout: number
}
export type VMStatusView =
  | 'Executed'
  | {
      MoveAbort: {
        abort_code: string
        location: string
      }
    }
  | {
      ExecutionFailure: {
        code_offset: number
        function: number
        location: string
        status_code: string
      }
    }
  | {
      Error: string
    }
