// This file was generated by `yarn gen:client`. Please, do not modify it.
import { RequestManager, Client } from "@open-rpc/client-js";
import {
  ExecuteTransactionResponseView,
  FunctionCallView,
  AnnotatedFunctionReturnValueView,
  AccessPath,
  AnnotatedStateView,
  EventFilterView,
  AnnotatedEventView,
  StructTag,
  PageView_for_Nullable_AnnotatedEventView_and_uint64,
  StateView,
  Hex,
  TransactionView,
  TransactionExecutionInfoView,
  PageView_for_Nullable_TransactionExecutionInfoView_and_uint128,
} from "./types";

export class RoochClient extends Client {
  constructor(requestManager: RequestManager) {
    super(requestManager);
  }

  async getRpcApiVersion(): Promise<string | undefined> {
    const resp = await this.request({
      method: "rpc.discover",
      params: [],
    });

    return resp.info.version as string;
  }

  // Send the signed transaction in bcs hex format This method blocks waiting for the transaction to be executed.
  async rooch_executeRawTransaction(
    tx_bcs_hex: Uint8Array,
  ): Promise<ExecuteTransactionResponseView> {
    const resp = await this.request({
      method: "rooch_executeRawTransaction",
      params: [tx_bcs_hex],
    });

    return resp as ExecuteTransactionResponseView;
  }

  // Execute a read-only function call The function do not change the state of Application
  async rooch_executeViewFunction(
    function_call: FunctionCallView,
  ): Promise<AnnotatedFunctionReturnValueView[]> {
    const resp = await this.request({
      method: "rooch_executeViewFunction",
      params: [function_call],
    });

    return resp as AnnotatedFunctionReturnValueView[];
  }

  // Get the annotated states by access_path The annotated states include the decoded move value of the state
  async rooch_getAnnotatedStates(
    access_path: AccessPath,
  ): Promise<AnnotatedStateView | null[]> {
    const resp = await this.request({
      method: "rooch_getAnnotatedStates",
      params: [access_path],
    });

    return resp as AnnotatedStateView | null[];
  }

  // Get the events by event filter
  async rooch_getEvents(
    filter: EventFilterView,
  ): Promise<AnnotatedEventView | null[]> {
    const resp = await this.request({
      method: "rooch_getEvents",
      params: [filter],
    });

    return resp as AnnotatedEventView | null[];
  }

  // Get the events by event handle id
  async rooch_getEventsByEventHandle(
    event_handle_type: StructTag,
    cursor: number,
    limit: number,
  ): Promise<PageView_for_Nullable_AnnotatedEventView_and_uint64> {
    const resp = await this.request({
      method: "rooch_getEventsByEventHandle",
      params: [event_handle_type, cursor, limit],
    });

    return resp as PageView_for_Nullable_AnnotatedEventView_and_uint64;
  }

  // Get the states by access_path
  async rooch_getStates(access_path: AccessPath): Promise<StateView | null[]> {
    const resp = await this.request({
      method: "rooch_getStates",
      params: [access_path],
    });

    return resp as StateView | null[];
  }

  async rooch_getTransactionByHash(hash: Hex): Promise<TransactionView> {
    const resp = await this.request({
      method: "rooch_getTransactionByHash",
      params: [hash],
    });

    return resp as TransactionView;
  }

  async rooch_getTransactionByIndex(
    start: number,
    limit: number,
  ): Promise<TransactionView[]> {
    const resp = await this.request({
      method: "rooch_getTransactionByIndex",
      params: [start, limit],
    });

    return resp as TransactionView[];
  }

  async rooch_getTransactionInfosByTxHash(
    tx_hashes: Hex[],
  ): Promise<TransactionExecutionInfoView | null[]> {
    const resp = await this.request({
      method: "rooch_getTransactionInfosByTxHash",
      params: [tx_hashes],
    });

    return resp as TransactionExecutionInfoView | null[];
  }

  async rooch_getTransactionInfosByTxOrder(
    cursor: number,
    limit: number,
  ): Promise<PageView_for_Nullable_TransactionExecutionInfoView_and_uint128> {
    const resp = await this.request({
      method: "rooch_getTransactionInfosByTxOrder",
      params: [cursor, limit],
    });

    return resp as PageView_for_Nullable_TransactionExecutionInfoView_and_uint128;
  }

  // Send the signed transaction in bcs hex format This method does not block waiting for the transaction to be executed.
  async rooch_sendRawTransaction(tx_bcs_hex: Uint8Array): Promise<Hex> {
    const resp = await this.request({
      method: "rooch_sendRawTransaction",
      params: [tx_bcs_hex],
    });

    return resp as Hex;
  }
}

// This file was generated by `yarn gen:client`. Please, do not modify it.